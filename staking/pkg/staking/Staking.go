// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package staking

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StakingMetaData contains all meta data concerning the Staking contract.
var StakingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minNumParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNumParticipants\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DisputeResolutionBegan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DisputeResolutionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashedAmount\",\"type\":\"uint256\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AVAILABLE_NODE_TYPES\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sequencerAddr\",\"type\":\"address\"}],\"name\":\"BeginDisputeResolution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_MIN_SLASH_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_STAKING_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sequencerAddr\",\"type\":\"address\"}],\"name\":\"EndDisputeResolution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetAvailableNodeTypes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GetCurrentAccountStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetCurrentParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetCurrentSequencers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetCurrentSequencersInProbation\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetCurrentStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetCurrentStakingThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetCurrentValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetCurrentWatchtowers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sequencerAddr\",\"type\":\"address\"}],\"name\":\"GetIsSequencerInProbation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMaxNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMaxNumSequencers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMaxNumValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMaxNumWatchtowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMinNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMinNumSequencers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMinNumValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMinNumWatchtowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetSlashPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"IsSequencer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"IsValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"IsWatchtower\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NODE_SEQUENCER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NODE_VALIDATOR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NODE_WATCHTOWER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maximumNumParticipants\",\"type\":\"uint256\"}],\"name\":\"SetMaxNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maximumNumSequencers\",\"type\":\"uint256\"}],\"name\":\"SetMaxNumSequencers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maximumNumValidators\",\"type\":\"uint256\"}],\"name\":\"SetMaxNumValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maximumNumWatchtowers\",\"type\":\"uint256\"}],\"name\":\"SetMaxNumWatchtowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumNumParticipants\",\"type\":\"uint256\"}],\"name\":\"SetMinNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumNumSequencers\",\"type\":\"uint256\"}],\"name\":\"SetMinNumSequencers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumNumValidators\",\"type\":\"uint256\"}],\"name\":\"SetMinNumValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumNumWatchtowers\",\"type\":\"uint256\"}],\"name\":\"SetMinNumWatchtowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"SetSlashPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"SetStakingMinThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToIsParticipant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToIsSequencer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToIsSequencerInProbationAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToIsValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToIsWatchtower\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToNodeType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToParticipantIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToSequencerInProbationIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToSequencerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToValidatorIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToWatchtowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maximumNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maximumNumSequencers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maximumNumValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maximumNumWatchtowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minStakingThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minimumNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minimumNumSequencers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minimumNumValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minimumNumWatchtowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_participants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_sequencers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_sequencers_in_probation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_slashPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_validators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_watchtowers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"slashAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slashAmount\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nodeType\",\"type\":\"string\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405260405180606001604052806040518060400160405280600981526020017f73657175656e636572000000000000000000000000000000000000000000000081525081526020016040518060400160405280600a81526020017f7761746368746f7765720000000000000000000000000000000000000000000081525081526020016040518060400160405280600981526020017f76616c696461746f7200000000000000000000000000000000000000000000008152508152506000906003620000d092919062000160565b50348015620000de57600080fd5b506040516200594f3803806200594f83398181016040528101906200010491906200028d565b808211156200014a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001419062000381565b60405180910390fd5b8160098190555080600a819055505050620006fa565b828054828255906000526020600020908101928215620001ad579160200282015b82811115620001ac5782518290816200019b919062000613565b509160200191906001019062000181565b5b509050620001bc9190620001c0565b5090565b5b80821115620001e45760008181620001da9190620001e8565b50600101620001c1565b5090565b508054620001f6906200040c565b6000825580601f106200020a57506200022b565b601f0160209004906000526020600020908101906200022a91906200022e565b5b50565b5b80821115620002495760008160009055506001016200022f565b5090565b600080fd5b6000819050919050565b620002678162000252565b81146200027357600080fd5b50565b60008151905062000287816200025c565b92915050565b60008060408385031215620002a757620002a66200024d565b5b6000620002b78582860162000276565b9250506020620002ca8582860162000276565b9150509250929050565b600082825260208201905092915050565b7f4d696e207061727469636970616e7473206e756d6265722063616e206e6f742060008201527f62652067726561746572207468616e206d6178206e756d206f6620706172746960208201527f636970616e747300000000000000000000000000000000000000000000000000604082015250565b600062000369604783620002d4565b91506200037682620002e5565b606082019050919050565b600060208201905081810360008301526200039c816200035a565b9050919050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200042557607f821691505b6020821081036200043b576200043a620003dd565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004a57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000466565b620004b1868362000466565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620004f4620004ee620004e88462000252565b620004c9565b62000252565b9050919050565b6000819050919050565b6200051083620004d3565b620005286200051f82620004fb565b84845462000473565b825550505050565b600090565b6200053f62000530565b6200054c81848462000505565b505050565b5b8181101562000574576200056860008262000535565b60018101905062000552565b5050565b601f821115620005c3576200058d8162000441565b620005988462000456565b81016020851015620005a8578190505b620005c0620005b78562000456565b83018262000551565b50505b505050565b600082821c905092915050565b6000620005e860001984600802620005c8565b1980831691505092915050565b6000620006038383620005d5565b9150826002028217905092915050565b6200061e82620003a3565b67ffffffffffffffff8111156200063a5762000639620003ae565b5b6200064682546200040c565b6200065382828562000578565b600060209050601f8311600181146200068b576000841562000676578287015190505b620006828582620005f5565b865550620006f2565b601f1984166200069b8662000441565b60005b82811015620006c5578489015182556001820191506020850194506020810190506200069e565b86831015620006e55784890151620006e1601f891682620005d5565b8355505b6001600288020188555050505b505050505050565b615245806200070a6000396000f3fe6080604052600436106104105760003560e01c8063a0f14bff1161021e578063c795c07711610123578063e028aadf116100ab578063eec9f52e1161007a578063eec9f52e146110f6578063f196f82414611121578063f76a1ee01461115e578063f90ecacc14611189578063f9a43d4c146111c657610410565b8063e028aadf14611028578063e2b5769d14611065578063e387a7ed146110a2578063ebe4ad6f146110cd57610410565b8063d3be81a8116100f2578063d3be81a814610f1b578063d551832f14610f46578063d79f10d214610f71578063d80ff2b914610fae578063dea7977414610feb57610410565b8063c795c07714610e5d578063c8fa5fe914610e88578063d140551714610eb3578063d147c38714610ede57610410565b8063bb5a26ff116101a6578063c36352e111610175578063c36352e114610d62578063c402d43c14610d8d578063c48c5f3714610db8578063c6199c1f14610df5578063c70966fb14610e2057610410565b8063bb5a26ff14610ca4578063bd9ed0b314610ce1578063bfc5aeee14610d0c578063c2ccacdf14610d3757610410565b8063aff1ea76116101ed578063aff1ea7614610b97578063b17ca89c14610bc2578063b41327ff14610bed578063b61b127f14610c2a578063b8889f0214610c6757610410565b8063a0f14bff14610ac7578063a145012614610b04578063a17e8b3d14610b2f578063af6da36e14610b6c57610410565b806346f45b8d116103245780637dceceb8116102ac57806398abb25e1161027b57806398abb25e146109cc57806398ff822d14610a0957806399a7c7e414610a465780639a083e8214610a715780639f9f710114610a9c57610410565b80637dceceb81461090e578063855598b71461094b5780638d0841481461097657806390e7c862146109a157610410565b8063584060bb116102f3578063584060bb146108155780636b2f7635146108525780636edf24811461087b578063760118b6146108a65780637b339263146108d157610410565b806346f45b8d146107665780635118469414610782578063560854f6146107ad57806357a87ffd146107ea57610410565b80631cb9bdca116103a75780632def6620116103765780632def6620146106935780633603da84146106aa578063409b9ece146106d557806340b007531461070057806342ca58d51461073d57610410565b80631cb9bdca146105c55780631efcf4d1146106025780631f2743b61461063f5780632c404e9c1461066a57610410565b80630e533c8e116103e35780630e533c8e146104e35780630fb18ccc1461052057806319908df81461054b57806319ae67641461058857610410565b806302b751991461041557806302fb4d8514610452578063065ae1711461047b578063068946e8146104b8575b600080fd5b34801561042157600080fd5b5061043c6004803603810190610437919061407d565b611203565b60405161044991906140c3565b60405180910390f35b34801561045e57600080fd5b506104796004803603810190610474919061410a565b61121b565b005b34801561048757600080fd5b506104a2600480360381019061049d919061407d565b61130a565b6040516104af9190614165565b60405180910390f35b3480156104c457600080fd5b506104cd61132a565b6040516104da91906140c3565b60405180910390f35b3480156104ef57600080fd5b5061050a6004803603810190610505919061407d565b611330565b60405161051791906140c3565b60405180910390f35b34801561052c57600080fd5b50610535611348565b60405161054291906140c3565b60405180910390f35b34801561055757600080fd5b50610572600480360381019061056d9190614180565b61134e565b60405161057f91906141bc565b60405180910390f35b34801561059457600080fd5b506105af60048036038101906105aa919061407d565b61138d565b6040516105bc9190614270565b60405180910390f35b3480156105d157600080fd5b506105ec60048036038101906105e7919061407d565b61142d565b6040516105f991906140c3565b60405180910390f35b34801561060e57600080fd5b506106296004803603810190610624919061407d565b611445565b6040516106369190614165565b60405180910390f35b34801561064b57600080fd5b50610654611465565b604051610661919061439e565b60405180910390f35b34801561067657600080fd5b50610691600480360381019061068c9190614180565b61153e565b005b34801561069f57600080fd5b506106a86115a7565b005b3480156106b657600080fd5b506106bf611692565b6040516106cc919061447e565b60405180910390f35b3480156106e157600080fd5b506106ea611720565b6040516106f791906140c3565b60405180910390f35b34801561070c57600080fd5b506107276004803603810190610722919061407d565b61172f565b6040516107349190614165565b60405180910390f35b34801561074957600080fd5b50610764600480360381019061075f9190614180565b61174f565b005b610780600480360381019061077b91906145d5565b6117b8565b005b34801561078e57600080fd5b50610797611823565b6040516107a491906140c3565b60405180910390f35b3480156107b957600080fd5b506107d460048036038101906107cf9190614180565b611828565b6040516107e191906140c3565b60405180910390f35b3480156107f657600080fd5b506107ff61183b565b60405161080c91906140c3565b60405180910390f35b34801561082157600080fd5b5061083c60048036038101906108379190614180565b61184a565b60405161084991906141bc565b60405180910390f35b34801561085e57600080fd5b506108796004803603810190610874919061407d565b611889565b005b34801561088757600080fd5b506108906118d8565b60405161089d91906140c3565b60405180910390f35b3480156108b257600080fd5b506108bb6118e2565b6040516108c891906140c3565b60405180910390f35b3480156108dd57600080fd5b506108f860048036038101906108f3919061407d565b6118ec565b6040516109059190614165565b60405180910390f35b34801561091a57600080fd5b506109356004803603810190610930919061407d565b61190c565b60405161094291906140c3565b60405180910390f35b34801561095757600080fd5b50610960611924565b60405161096d9190614270565b60405180910390f35b34801561098257600080fd5b5061098b61195d565b60405161099891906140c3565b60405180910390f35b3480156109ad57600080fd5b506109b6611963565b6040516109c391906140c3565b60405180910390f35b3480156109d857600080fd5b506109f360048036038101906109ee9190614180565b611969565b604051610a0091906140c3565b60405180910390f35b348015610a1557600080fd5b50610a306004803603810190610a2b919061407d565b61197c565b604051610a3d9190614165565b60405180910390f35b348015610a5257600080fd5b50610a5b6119d2565b604051610a68919061447e565b60405180910390f35b348015610a7d57600080fd5b50610a86611a60565b604051610a939190614270565b60405180910390f35b348015610aa857600080fd5b50610ab1611a99565b604051610abe9190614270565b60405180910390f35b348015610ad357600080fd5b50610aee6004803603810190610ae9919061407d565b611ad2565b604051610afb91906140c3565b60405180910390f35b348015610b1057600080fd5b50610b19611aea565b604051610b2691906140c3565b60405180910390f35b348015610b3b57600080fd5b50610b566004803603810190610b51919061407d565b611af0565b604051610b639190614165565b60405180910390f35b348015610b7857600080fd5b50610b81611b02565b604051610b8e91906140c3565b60405180910390f35b348015610ba357600080fd5b50610bac611b08565b604051610bb991906140c3565b60405180910390f35b348015610bce57600080fd5b50610bd7611b14565b604051610be491906140c3565b60405180910390f35b348015610bf957600080fd5b50610c146004803603810190610c0f9190614180565b611b1e565b604051610c219190614270565b60405180910390f35b348015610c3657600080fd5b50610c516004803603810190610c4c9190614180565b611bca565b604051610c5e91906140c3565b60405180910390f35b348015610c7357600080fd5b50610c8e6004803603810190610c89919061407d565b611bdd565b604051610c9b91906140c3565b60405180910390f35b348015610cb057600080fd5b50610ccb6004803603810190610cc6919061407d565b611bf5565b604051610cd89190614165565b60405180910390f35b348015610ced57600080fd5b50610cf6611c4b565b604051610d0391906140c3565b60405180910390f35b348015610d1857600080fd5b50610d21611c55565b604051610d2e91906140c3565b60405180910390f35b348015610d4357600080fd5b50610d4c611c5f565b604051610d5991906140c3565b60405180910390f35b348015610d6e57600080fd5b50610d77611c69565b604051610d84919061447e565b60405180910390f35b348015610d9957600080fd5b50610da2611cf7565b604051610daf919061447e565b60405180910390f35b348015610dc457600080fd5b50610ddf6004803603810190610dda9190614180565b611d85565b604051610dec91906141bc565b60405180910390f35b348015610e0157600080fd5b50610e0a611dc4565b604051610e1791906140c3565b60405180910390f35b348015610e2c57600080fd5b50610e476004803603810190610e42919061407d565b611dca565b604051610e549190614165565b60405180910390f35b348015610e6957600080fd5b50610e72611dea565b604051610e7f91906140c3565b60405180910390f35b348015610e9457600080fd5b50610e9d611df0565b604051610eaa91906140c3565b60405180910390f35b348015610ebf57600080fd5b50610ec8611dfa565b604051610ed5919061447e565b60405180910390f35b348015610eea57600080fd5b50610f056004803603810190610f009190614180565b611e88565b604051610f1291906140c3565b60405180910390f35b348015610f2757600080fd5b50610f30611e9b565b604051610f3d91906140c3565b60405180910390f35b348015610f5257600080fd5b50610f5b611ea5565b604051610f6891906140c3565b60405180910390f35b348015610f7d57600080fd5b50610f986004803603810190610f93919061407d565b611eab565b604051610fa591906140c3565b60405180910390f35b348015610fba57600080fd5b50610fd56004803603810190610fd09190614180565b611ef4565b604051610fe291906140c3565b60405180910390f35b348015610ff757600080fd5b50611012600480360381019061100d9190614180565b611f07565b60405161101f91906140c3565b60405180910390f35b34801561103457600080fd5b5061104f600480360381019061104a9190614180565b611f1a565b60405161105c91906140c3565b60405180910390f35b34801561107157600080fd5b5061108c6004803603810190611087919061407d565b611f2d565b6040516110999190614165565b60405180910390f35b3480156110ae57600080fd5b506110b7611f83565b6040516110c491906140c3565b60405180910390f35b3480156110d957600080fd5b506110f460048036038101906110ef919061407d565b611f89565b005b34801561110257600080fd5b5061110b611fd8565b60405161111891906140c3565b60405180910390f35b34801561112d57600080fd5b5061114860048036038101906111439190614180565b611fe2565b60405161115591906141bc565b60405180910390f35b34801561116a57600080fd5b50611173612021565b60405161118091906140c3565b60405180910390f35b34801561119557600080fd5b506111b060048036038101906111ab9190614180565b612027565b6040516111bd91906141bc565b60405180910390f35b3480156111d257600080fd5b506111ed60048036038101906111e89190614180565b612066565b6040516111fa91906140c3565b60405180910390f35b601c6020528060005260406000206000915090505481565b61123a3373ffffffffffffffffffffffffffffffffffffffff16612079565b1561127a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112719061466a565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116112fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f3906146d6565b60405180910390fd5b611306828261209c565b5050565b601b6020528060005260406000206000915054906101000a900460ff1681565b600a5481565b60166020528060005260406000206000915090505481565b600e5481565b6011818154811061135e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760205280600052604060002060009150905080546113ac90614725565b80601f01602080910402602001604051908101604052809291908181526020018280546113d890614725565b80156114255780601f106113fa57610100808354040283529160200191611425565b820191906000526020600020905b81548152906001019060200180831161140857829003601f168201915b505050505081565b60136020528060005260406000206000915090505481565b60156020528060005260406000206000915054906101000a900460ff1681565b60606000805480602002602001604051908101604052809291908181526020016000905b828210156115355783829060005260206000200180546114a890614725565b80601f01602080910402602001604051908101604052809291908181526020018280546114d490614725565b80156115215780601f106114f657610100808354040283529160200191611521565b820191906000526020600020905b81548152906001019060200180831161150457829003601f168201915b505050505081526020019060010190611489565b50505050905090565b61155d3373ffffffffffffffffffffffffffffffffffffffff16612079565b1561159d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115949061466a565b60405180910390fd5b8060018190555050565b6115c63373ffffffffffffffffffffffffffffffffffffffff16612079565b15611606576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fd9061466a565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167f906146d6565b60405180910390fd5b6116906122ca565b565b6060601780548060200260200160405190810160405280929190818152602001828054801561171657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116116cc575b5050505050905090565b600061172a61249d565b905090565b60186020528060005260406000206000915054906101000a900460ff1681565b61176e3373ffffffffffffffffffffffffffffffffffffffff16612079565b156117ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a59061466a565b60405180910390fd5b8060028190555050565b6117d73373ffffffffffffffffffffffffffffffffffffffff16612079565b15611817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180e9061466a565b60405180910390fd5b611820816124c2565b50565b600181565b600081600c81905550600c549050919050565b600061184561276a565b905090565b6014818154811061185a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61189281612787565b8073ffffffffffffffffffffffffffffffffffffffff167f14ebe573ff6e00d7293f5d831eb94cade703155cd0910eb5316a7b2f17b14c3560405160405180910390a250565b6000600f54905090565b6000600b54905090565b60126020528060005260406000206000915054906101000a900460ff1681565b60056020528060005260406000206000915090505481565b6040518060400160405280600981526020017f73657175656e636572000000000000000000000000000000000000000000000081525081565b600b5481565b60105481565b6000816009819055506009549050919050565b6000601b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60606011805480602002602001604051908101604052809291908181526020018280548015611a5657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a0c575b5050505050905090565b6040518060400160405280600981526020017f76616c696461746f72000000000000000000000000000000000000000000000081525081565b6040518060400160405280600a81526020017f7761746368746f7765720000000000000000000000000000000000000000000081525081565b60196020528060005260406000206000915090505481565b60015481565b6000611afb8261288e565b9050919050565b600f5481565b670de0b6b3a764000081565b6000601054905090565b60008181548110611b2e57600080fd5b906000526020600020016000915090508054611b4990614725565b80601f0160208091040260200160405190810160405280929190818152602001828054611b7590614725565b8015611bc25780601f10611b9757610100808354040283529160200191611bc2565b820191906000526020600020905b815481529060010190602001808311611ba557829003601f168201915b505050505081565b600081600b81905550600b549050919050565b60066020528060005260406000206000915090505481565b6000601260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600d54905090565b6000600954905090565b6000600e54905090565b6060601a805480602002602001604051908101604052809291908181526020018280548015611ced57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611ca3575b5050505050905090565b60606014805480602002602001604051908101604052809291908181526020018280548015611d7b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611d31575b5050505050905090565b60178181548110611d9557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60046020528060005260406000206000915054906101000a900460ff1681565b600c5481565b6000600a54905090565b60606003805480602002602001604051908101604052809291908181526020018280548015611e7e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611e34575b5050505050905090565b6000816010819055506010549050919050565b6000600854905090565b60025481565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600081600d81905550600d549050919050565b600081600f81905550600f549050919050565b600081600a81905550600a549050919050565b6000601860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60085481565b611f92816128e4565b8073ffffffffffffffffffffffffffffffffffffffff167f7da9849dcad1bb34324464458a33a9d0820286dedf66ec9c6669e730118d1c0660405160405180910390a250565b6000600c54905090565b60038181548110611ff257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b601a818154811061203757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600e81905550600e549050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008203612123576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211a906147c8565b60405180910390fd5b808210612165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215c9061485a565b60405180910390fd5b6000828261217391906148a9565b905080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600860008282546121cb91906148a9565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015612218573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f45a371af55b0726877a30f464edc14db5879ab096590bacce682cf6c1822359682856040516122619291906148dd565b60405180910390a26122728461288e565b156122c457612280846128e4565b8373ffffffffffffffffffffffffffffffffffffffff167f7da9849dcad1bb34324464458a33a9d0820286dedf66ec9c6669e730118d1c0660405160405180910390a25b50505050565b6122d333612be2565b612312576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123099061499e565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600860008282546123ad91906148a9565b925050819055506123bd33612c38565b6123c633612f37565b156123d5576123d433612f8d565b5b6123de33613243565b156123ed576123ec33613299565b5b6123f63361354f565b1561240557612404336135a5565b5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561244b573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f758260405161249291906140c3565b60405180910390a250565b60008060015411156124b35760015490506124bf565b670de0b6b3a764000090505b90565b6124cb8161385b565b806124db57506124da816138f8565b5b806124eb57506124ea81613995565b5b61252a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252190614a30565b60405180910390fd5b61253261249d565b341015612574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256b90614ae8565b60405180910390fd5b61257e3382613a32565b6125bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b490614b7a565b60405180910390fd5b6125c73382613aab565b612606576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125fd90614c0c565b60405180910390fd5b6126103382613b24565b61264f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264690614c9e565b60405180910390fd5b34600860008282546126619190614cbe565b9250508190555034600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126b79190614cbe565b925050819055506126c733613b9d565b6126d08161385b565b156126e3576126de33613cf6565b612719565b6126ec816138f8565b156126ff576126fa33613dfd565b612718565b61270881613995565b156127175761271633613f04565b5b5b5b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d3460405161275f91906140c3565b60405180910390a250565b6000806002541161277e5760019050612784565b60025490505b90565b6001601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550601480549050601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506014819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6128ed8161288e565b61292c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292390614dac565b60405180910390fd5b601480549050601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106129b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a990614e3e565b60405180910390fd5b6000601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006001601480549050612a0a91906148a9565b9050808214612af957600060148281548110612a2957612a28614e5e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508060148481548110612a6b57612a6a614e5e565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000601660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506014805480612ba857612ba7614e8d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60095460038054905011612c81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c7890614f54565b60405180910390fd5b600380549050600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410612d07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cfe90614fe6565b60405180910390fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006001600380549050612d5f91906148a9565b9050808214612e4e57600060038281548110612d7e57612d7d614e5e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508060038481548110612dc057612dbf614e5e565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506003805480612efd57612efc614e8d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b6000601260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b601180549050601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410613013576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161300a90615078565b60405180910390fd5b6000601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160118054905061306b91906148a9565b905080821461315a5760006011828154811061308a57613089614e5e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080601184815481106130cc576130cb614e5e565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000601260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601180548061320957613208614e8d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b6000601860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b601780549050601960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541061331f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133169061510a565b60405180910390fd5b6000601960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160178054905061337791906148a9565b90508082146134665760006017828154811061339657613395614e5e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080601784815481106133d8576133d7614e5e565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000601860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000601960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601780548061351557613514614e8d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b6000601b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b601a80549050601c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541061362b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136229061519c565b60405180910390fd5b6000601c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006001601a8054905061368391906148a9565b9050808214613772576000601a82815481106136a2576136a1614e5e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080601a84815481106136e4576136e3614e5e565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000601b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000601c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601a80548061382157613820614e8d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b60008160405160200161386e91906151f8565b604051602081830303815290604052805190602001206040518060400160405280600981526020017f73657175656e63657200000000000000000000000000000000000000000000008152506040516020016138ca91906151f8565b60405160208183030381529060405280519060200120036138ee57600190506138f3565b600090505b919050565b60008160405160200161390b91906151f8565b604051602081830303815290604052805190602001206040518060400160405280600a81526020017f7761746368746f7765720000000000000000000000000000000000000000000081525060405160200161396791906151f8565b604051602081830303815290604052805190602001200361398b5760019050613990565b600090505b919050565b6000816040516020016139a891906151f8565b604051602081830303815290604052805190602001206040518060400160405280600981526020017f76616c696461746f720000000000000000000000000000000000000000000000815250604051602001613a0491906151f8565b6040516020818303038152906040528051906020012003613a285760019050613a2d565b600090505b919050565b6000613a3d8261385b565b8015613a925750601260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15613aa05760009050613aa5565b600190505b92915050565b6000613ab6826138f8565b8015613b0b5750601860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15613b195760009050613b1e565b600190505b92915050565b6000613b2f82613995565b8015613b845750601b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15613b925760009050613b97565b600190505b92915050565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16613cf3576001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600380549050600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6001601260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550601180549050601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506011819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6001601860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550601780549050601960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506017819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6001601b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550601a80549050601c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601a819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061404a8261401f565b9050919050565b61405a8161403f565b811461406557600080fd5b50565b60008135905061407781614051565b92915050565b60006020828403121561409357614092614015565b5b60006140a184828501614068565b91505092915050565b6000819050919050565b6140bd816140aa565b82525050565b60006020820190506140d860008301846140b4565b92915050565b6140e7816140aa565b81146140f257600080fd5b50565b600081359050614104816140de565b92915050565b6000806040838503121561412157614120614015565b5b600061412f85828601614068565b9250506020614140858286016140f5565b9150509250929050565b60008115159050919050565b61415f8161414a565b82525050565b600060208201905061417a6000830184614156565b92915050565b60006020828403121561419657614195614015565b5b60006141a4848285016140f5565b91505092915050565b6141b68161403f565b82525050565b60006020820190506141d160008301846141ad565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156142115780820151818401526020810190506141f6565b83811115614220576000848401525b50505050565b6000601f19601f8301169050919050565b6000614242826141d7565b61424c81856141e2565b935061425c8185602086016141f3565b61426581614226565b840191505092915050565b6000602082019050818103600083015261428a8184614237565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006142da826141d7565b6142e481856142be565b93506142f48185602086016141f3565b6142fd81614226565b840191505092915050565b600061431483836142cf565b905092915050565b6000602082019050919050565b600061433482614292565b61433e818561429d565b935083602082028501614350856142ae565b8060005b8581101561438c578484038952815161436d8582614308565b94506143788361431c565b925060208a01995050600181019050614354565b50829750879550505050505092915050565b600060208201905081810360008301526143b88184614329565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6143f58161403f565b82525050565b600061440783836143ec565b60208301905092915050565b6000602082019050919050565b600061442b826143c0565b61443581856143cb565b9350614440836143dc565b8060005b8381101561447157815161445888826143fb565b975061446383614413565b925050600181019050614444565b5085935050505092915050565b600060208201905081810360008301526144988184614420565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6144e282614226565b810181811067ffffffffffffffff82111715614501576145006144aa565b5b80604052505050565b600061451461400b565b905061452082826144d9565b919050565b600067ffffffffffffffff8211156145405761453f6144aa565b5b61454982614226565b9050602081019050919050565b82818337600083830152505050565b600061457861457384614525565b61450a565b905082815260208101848484011115614594576145936144a5565b5b61459f848285614556565b509392505050565b600082601f8301126145bc576145bb6144a0565b5b81356145cc848260208601614565565b91505092915050565b6000602082840312156145eb576145ea614015565b5b600082013567ffffffffffffffff8111156146095761460861401a565b5b614615848285016145a7565b91505092915050565b7f4f6e6c7920454f412063616e2063616c6c2066756e6374696f6e000000000000600082015250565b6000614654601a836141e2565b915061465f8261461e565b602082019050919050565b6000602082019050818103600083015261468381614647565b9050919050565b7f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000600082015250565b60006146c0601d836141e2565b91506146cb8261468a565b602082019050919050565b600060208201905081810360008301526146ef816146b3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061473d57607f821691505b6020821081036147505761474f6146f6565b5b50919050565b7f536c61736820616d6f756e74206e6565647320746f2062652070726f7669646560008201527f642e000000000000000000000000000000000000000000000000000000000000602082015250565b60006147b26022836141e2565b91506147bd82614756565b604082019050919050565b600060208201905081810360008301526147e1816147a5565b9050919050565b7f536c61736820616d6f756e742063616e6e6f742062652067726561746572207460008201527f68616e207374616b656420616d6f756e74000000000000000000000000000000602082015250565b60006148446031836141e2565b915061484f826147e8565b604082019050919050565b6000602082019050818103600083015261487381614837565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006148b4826140aa565b91506148bf836140aa565b9250828210156148d2576148d161487a565b5b828203905092915050565b60006040820190506148f260008301856140b4565b6148ff60208301846140b4565b9392505050565b7f53656e6465722068617320746f2062652070617274206f66207374616b696e6760008201527f20706f6c6c20696e206f7264657220746f20756e7374616b652069747320736860208201527f6172652e20556e7374616b652072656a65637465642e00000000000000000000604082015250565b60006149886056836141e2565b915061499382614906565b606082019050919050565b600060208201905081810360008301526149b78161497b565b9050919050565b7f50726f7669646564206e6f646520747970652068617320746f206d617463682060008201527f617661696c61626c65206e6f6465207479706573000000000000000000000000602082015250565b6000614a1a6034836141e2565b9150614a25826149be565b604082019050919050565b60006020820190508181036000830152614a4981614a0d565b9050919050565b7f496e737566696369656e74207374616b696e6720616d6f756e742070726f766960008201527f6465642e2048617320746f206265206c6172676572207468616e207374616b6960208201527f6e67206d696e696d756d207468726573686f6c64000000000000000000000000604082015250565b6000614ad26054836141e2565b9150614add82614a50565b606082019050919050565b60006020820190508181036000830152614b0181614ac5565b9050919050565b7f53656e64657220697320616c72656164792073657175656e6365722e2052656a60008201527f656374696e67207374616b6520726571756573742e0000000000000000000000602082015250565b6000614b646035836141e2565b9150614b6f82614b08565b604082019050919050565b60006020820190508181036000830152614b9381614b57565b9050919050565b7f53656e64657220697320616c7265616479207761746368746f7765722e20526560008201527f6a656374696e67207374616b6520726571756573742e00000000000000000000602082015250565b6000614bf66036836141e2565b9150614c0182614b9a565b604082019050919050565b60006020820190508181036000830152614c2581614be9565b9050919050565b7f53656e64657220697320616c72656164792076616c696461746f722e2052656a60008201527f656374696e67207374616b6520726571756573742e0000000000000000000000602082015250565b6000614c886035836141e2565b9150614c9382614c2c565b604082019050919050565b60006020820190508181036000830152614cb781614c7b565b9050919050565b6000614cc9826140aa565b9150614cd4836140aa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614d0957614d0861487a565b5b828201905092915050565b7f416464726573732068617320746f20626520696e2070726f626174696f6e206960008201527f6e206f7264657220746f2064656c6574652069742066726f6d2074686520707260208201527f6f626174696f6e2073657175656e63657273206c6973742e0000000000000000604082015250565b6000614d966058836141e2565b9150614da182614d14565b606082019050919050565b60006020820190508181036000830152614dc581614d89565b9050919050565b7f6d616c6963696f7573207061727469636970616e7420696e646578206f75742060008201527f6f662072616e676520696e206d617070696e6700000000000000000000000000602082015250565b6000614e286033836141e2565b9150614e3382614dcc565b604082019050919050565b60006020820190508181036000830152614e5781614e1b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f5374616b696e67207061727469636970616e74732063616e2774206265206c6560008201527f7373207468616e20746865206d696e696d756d2072657175697265642070617260208201527f7469636970616e74206e756d0000000000000000000000000000000000000000604082015250565b6000614f3e604c836141e2565b9150614f4982614ebc565b606082019050919050565b60006020820190508181036000830152614f6d81614f31565b9050919050565b7f7061727469636970616e7420696e646578206f7574206f662072616e6765206960008201527f6e206d617070696e670000000000000000000000000000000000000000000000602082015250565b6000614fd06029836141e2565b9150614fdb82614f74565b604082019050919050565b60006020820190508181036000830152614fff81614fc3565b9050919050565b7f73657175656e63657220696e646578206f7574206f662072616e676520696e2060008201527f6d617070696e6700000000000000000000000000000000000000000000000000602082015250565b60006150626027836141e2565b915061506d82615006565b604082019050919050565b6000602082019050818103600083015261509181615055565b9050919050565b7f7761746368746f77657220696e646578206f7574206f662072616e676520696e60008201527f206d617070696e67000000000000000000000000000000000000000000000000602082015250565b60006150f46028836141e2565b91506150ff82615098565b604082019050919050565b60006020820190508181036000830152615123816150e7565b9050919050565b7f76616c696461746f7220696e646578206f7574206f662072616e676520696e2060008201527f6d617070696e6700000000000000000000000000000000000000000000000000602082015250565b60006151866027836141e2565b91506151918261512a565b604082019050919050565b600060208201905081810360008301526151b581615179565b9050919050565b600081905092915050565b60006151d2826141d7565b6151dc81856151bc565b93506151ec8185602086016141f3565b80840191505092915050565b600061520482846151c7565b91508190509291505056fea2646970667358221220b1c10b409387957017c8010b8f556e51b905e745c7e75645327223995016ae3864736f6c634300080f0033",
}

// StakingABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingMetaData.ABI instead.
var StakingABI = StakingMetaData.ABI

// StakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingMetaData.Bin instead.
var StakingBin = StakingMetaData.Bin

// DeployStaking deploys a new Ethereum contract, binding an instance of Staking to it.
func DeployStaking(auth *bind.TransactOpts, backend bind.ContractBackend, minNumParticipants *big.Int, maxNumParticipants *big.Int) (common.Address, *types.Transaction, *Staking, error) {
	parsed, err := StakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingBin), backend, minNumParticipants, maxNumParticipants)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// Staking is an auto generated Go binding around an Ethereum contract.
type Staking struct {
	StakingCaller     // Read-only binding to the contract
	StakingTransactor // Write-only binding to the contract
	StakingFilterer   // Log filterer for contract events
}

// StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingSession struct {
	Contract     *Staking          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingCallerSession struct {
	Contract *StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingTransactorSession struct {
	Contract     *StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingRaw struct {
	Contract *Staking // Generic contract binding to access the raw methods on
}

// StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingCallerRaw struct {
	Contract *StakingCaller // Generic read-only contract binding to access the raw methods on
}

// StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingTransactorRaw struct {
	Contract *StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStaking creates a new instance of Staking, bound to a specific deployed contract.
func NewStaking(address common.Address, backend bind.ContractBackend) (*Staking, error) {
	contract, err := bindStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// NewStakingCaller creates a new read-only instance of Staking, bound to a specific deployed contract.
func NewStakingCaller(address common.Address, caller bind.ContractCaller) (*StakingCaller, error) {
	contract, err := bindStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingCaller{contract: contract}, nil
}

// NewStakingTransactor creates a new write-only instance of Staking, bound to a specific deployed contract.
func NewStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingTransactor, error) {
	contract, err := bindStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingTransactor{contract: contract}, nil
}

// NewStakingFilterer creates a new log filterer instance of Staking, bound to a specific deployed contract.
func NewStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingFilterer, error) {
	contract, err := bindStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingFilterer{contract: contract}, nil
}

// bindStaking binds a generic wrapper to an already deployed contract.
func bindStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transact(opts, method, params...)
}

// AVAILABLENODETYPES is a free data retrieval call binding the contract method 0xb41327ff.
//
// Solidity: function AVAILABLE_NODE_TYPES(uint256 ) view returns(string)
func (_Staking *StakingCaller) AVAILABLENODETYPES(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "AVAILABLE_NODE_TYPES", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AVAILABLENODETYPES is a free data retrieval call binding the contract method 0xb41327ff.
//
// Solidity: function AVAILABLE_NODE_TYPES(uint256 ) view returns(string)
func (_Staking *StakingSession) AVAILABLENODETYPES(arg0 *big.Int) (string, error) {
	return _Staking.Contract.AVAILABLENODETYPES(&_Staking.CallOpts, arg0)
}

// AVAILABLENODETYPES is a free data retrieval call binding the contract method 0xb41327ff.
//
// Solidity: function AVAILABLE_NODE_TYPES(uint256 ) view returns(string)
func (_Staking *StakingCallerSession) AVAILABLENODETYPES(arg0 *big.Int) (string, error) {
	return _Staking.Contract.AVAILABLENODETYPES(&_Staking.CallOpts, arg0)
}

// DEFAULTMINSLASHPERCENTAGE is a free data retrieval call binding the contract method 0x51184694.
//
// Solidity: function DEFAULT_MIN_SLASH_PERCENTAGE() view returns(uint256)
func (_Staking *StakingCaller) DEFAULTMINSLASHPERCENTAGE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "DEFAULT_MIN_SLASH_PERCENTAGE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DEFAULTMINSLASHPERCENTAGE is a free data retrieval call binding the contract method 0x51184694.
//
// Solidity: function DEFAULT_MIN_SLASH_PERCENTAGE() view returns(uint256)
func (_Staking *StakingSession) DEFAULTMINSLASHPERCENTAGE() (*big.Int, error) {
	return _Staking.Contract.DEFAULTMINSLASHPERCENTAGE(&_Staking.CallOpts)
}

// DEFAULTMINSLASHPERCENTAGE is a free data retrieval call binding the contract method 0x51184694.
//
// Solidity: function DEFAULT_MIN_SLASH_PERCENTAGE() view returns(uint256)
func (_Staking *StakingCallerSession) DEFAULTMINSLASHPERCENTAGE() (*big.Int, error) {
	return _Staking.Contract.DEFAULTMINSLASHPERCENTAGE(&_Staking.CallOpts)
}

// DEFAULTSTAKINGTHRESHOLD is a free data retrieval call binding the contract method 0xaff1ea76.
//
// Solidity: function DEFAULT_STAKING_THRESHOLD() view returns(uint256)
func (_Staking *StakingCaller) DEFAULTSTAKINGTHRESHOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "DEFAULT_STAKING_THRESHOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DEFAULTSTAKINGTHRESHOLD is a free data retrieval call binding the contract method 0xaff1ea76.
//
// Solidity: function DEFAULT_STAKING_THRESHOLD() view returns(uint256)
func (_Staking *StakingSession) DEFAULTSTAKINGTHRESHOLD() (*big.Int, error) {
	return _Staking.Contract.DEFAULTSTAKINGTHRESHOLD(&_Staking.CallOpts)
}

// DEFAULTSTAKINGTHRESHOLD is a free data retrieval call binding the contract method 0xaff1ea76.
//
// Solidity: function DEFAULT_STAKING_THRESHOLD() view returns(uint256)
func (_Staking *StakingCallerSession) DEFAULTSTAKINGTHRESHOLD() (*big.Int, error) {
	return _Staking.Contract.DEFAULTSTAKINGTHRESHOLD(&_Staking.CallOpts)
}

// GetAvailableNodeTypes is a free data retrieval call binding the contract method 0x1f2743b6.
//
// Solidity: function GetAvailableNodeTypes() view returns(string[])
func (_Staking *StakingCaller) GetAvailableNodeTypes(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetAvailableNodeTypes")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetAvailableNodeTypes is a free data retrieval call binding the contract method 0x1f2743b6.
//
// Solidity: function GetAvailableNodeTypes() view returns(string[])
func (_Staking *StakingSession) GetAvailableNodeTypes() ([]string, error) {
	return _Staking.Contract.GetAvailableNodeTypes(&_Staking.CallOpts)
}

// GetAvailableNodeTypes is a free data retrieval call binding the contract method 0x1f2743b6.
//
// Solidity: function GetAvailableNodeTypes() view returns(string[])
func (_Staking *StakingCallerSession) GetAvailableNodeTypes() ([]string, error) {
	return _Staking.Contract.GetAvailableNodeTypes(&_Staking.CallOpts)
}

// GetCurrentAccountStakedAmount is a free data retrieval call binding the contract method 0xd79f10d2.
//
// Solidity: function GetCurrentAccountStakedAmount(address addr) view returns(uint256)
func (_Staking *StakingCaller) GetCurrentAccountStakedAmount(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetCurrentAccountStakedAmount", addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentAccountStakedAmount is a free data retrieval call binding the contract method 0xd79f10d2.
//
// Solidity: function GetCurrentAccountStakedAmount(address addr) view returns(uint256)
func (_Staking *StakingSession) GetCurrentAccountStakedAmount(addr common.Address) (*big.Int, error) {
	return _Staking.Contract.GetCurrentAccountStakedAmount(&_Staking.CallOpts, addr)
}

// GetCurrentAccountStakedAmount is a free data retrieval call binding the contract method 0xd79f10d2.
//
// Solidity: function GetCurrentAccountStakedAmount(address addr) view returns(uint256)
func (_Staking *StakingCallerSession) GetCurrentAccountStakedAmount(addr common.Address) (*big.Int, error) {
	return _Staking.Contract.GetCurrentAccountStakedAmount(&_Staking.CallOpts, addr)
}

// GetCurrentParticipants is a free data retrieval call binding the contract method 0xd1405517.
//
// Solidity: function GetCurrentParticipants() view returns(address[])
func (_Staking *StakingCaller) GetCurrentParticipants(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetCurrentParticipants")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetCurrentParticipants is a free data retrieval call binding the contract method 0xd1405517.
//
// Solidity: function GetCurrentParticipants() view returns(address[])
func (_Staking *StakingSession) GetCurrentParticipants() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentParticipants(&_Staking.CallOpts)
}

// GetCurrentParticipants is a free data retrieval call binding the contract method 0xd1405517.
//
// Solidity: function GetCurrentParticipants() view returns(address[])
func (_Staking *StakingCallerSession) GetCurrentParticipants() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentParticipants(&_Staking.CallOpts)
}

// GetCurrentSequencers is a free data retrieval call binding the contract method 0x99a7c7e4.
//
// Solidity: function GetCurrentSequencers() view returns(address[])
func (_Staking *StakingCaller) GetCurrentSequencers(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetCurrentSequencers")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetCurrentSequencers is a free data retrieval call binding the contract method 0x99a7c7e4.
//
// Solidity: function GetCurrentSequencers() view returns(address[])
func (_Staking *StakingSession) GetCurrentSequencers() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentSequencers(&_Staking.CallOpts)
}

// GetCurrentSequencers is a free data retrieval call binding the contract method 0x99a7c7e4.
//
// Solidity: function GetCurrentSequencers() view returns(address[])
func (_Staking *StakingCallerSession) GetCurrentSequencers() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentSequencers(&_Staking.CallOpts)
}

// GetCurrentSequencersInProbation is a free data retrieval call binding the contract method 0xc402d43c.
//
// Solidity: function GetCurrentSequencersInProbation() view returns(address[])
func (_Staking *StakingCaller) GetCurrentSequencersInProbation(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetCurrentSequencersInProbation")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetCurrentSequencersInProbation is a free data retrieval call binding the contract method 0xc402d43c.
//
// Solidity: function GetCurrentSequencersInProbation() view returns(address[])
func (_Staking *StakingSession) GetCurrentSequencersInProbation() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentSequencersInProbation(&_Staking.CallOpts)
}

// GetCurrentSequencersInProbation is a free data retrieval call binding the contract method 0xc402d43c.
//
// Solidity: function GetCurrentSequencersInProbation() view returns(address[])
func (_Staking *StakingCallerSession) GetCurrentSequencersInProbation() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentSequencersInProbation(&_Staking.CallOpts)
}

// GetCurrentStakedAmount is a free data retrieval call binding the contract method 0xd3be81a8.
//
// Solidity: function GetCurrentStakedAmount() view returns(uint256)
func (_Staking *StakingCaller) GetCurrentStakedAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetCurrentStakedAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentStakedAmount is a free data retrieval call binding the contract method 0xd3be81a8.
//
// Solidity: function GetCurrentStakedAmount() view returns(uint256)
func (_Staking *StakingSession) GetCurrentStakedAmount() (*big.Int, error) {
	return _Staking.Contract.GetCurrentStakedAmount(&_Staking.CallOpts)
}

// GetCurrentStakedAmount is a free data retrieval call binding the contract method 0xd3be81a8.
//
// Solidity: function GetCurrentStakedAmount() view returns(uint256)
func (_Staking *StakingCallerSession) GetCurrentStakedAmount() (*big.Int, error) {
	return _Staking.Contract.GetCurrentStakedAmount(&_Staking.CallOpts)
}

// GetCurrentStakingThreshold is a free data retrieval call binding the contract method 0x409b9ece.
//
// Solidity: function GetCurrentStakingThreshold() view returns(uint256)
func (_Staking *StakingCaller) GetCurrentStakingThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetCurrentStakingThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentStakingThreshold is a free data retrieval call binding the contract method 0x409b9ece.
//
// Solidity: function GetCurrentStakingThreshold() view returns(uint256)
func (_Staking *StakingSession) GetCurrentStakingThreshold() (*big.Int, error) {
	return _Staking.Contract.GetCurrentStakingThreshold(&_Staking.CallOpts)
}

// GetCurrentStakingThreshold is a free data retrieval call binding the contract method 0x409b9ece.
//
// Solidity: function GetCurrentStakingThreshold() view returns(uint256)
func (_Staking *StakingCallerSession) GetCurrentStakingThreshold() (*big.Int, error) {
	return _Staking.Contract.GetCurrentStakingThreshold(&_Staking.CallOpts)
}

// GetCurrentValidators is a free data retrieval call binding the contract method 0xc36352e1.
//
// Solidity: function GetCurrentValidators() view returns(address[])
func (_Staking *StakingCaller) GetCurrentValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetCurrentValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetCurrentValidators is a free data retrieval call binding the contract method 0xc36352e1.
//
// Solidity: function GetCurrentValidators() view returns(address[])
func (_Staking *StakingSession) GetCurrentValidators() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentValidators(&_Staking.CallOpts)
}

// GetCurrentValidators is a free data retrieval call binding the contract method 0xc36352e1.
//
// Solidity: function GetCurrentValidators() view returns(address[])
func (_Staking *StakingCallerSession) GetCurrentValidators() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentValidators(&_Staking.CallOpts)
}

// GetCurrentWatchtowers is a free data retrieval call binding the contract method 0x3603da84.
//
// Solidity: function GetCurrentWatchtowers() view returns(address[])
func (_Staking *StakingCaller) GetCurrentWatchtowers(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetCurrentWatchtowers")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetCurrentWatchtowers is a free data retrieval call binding the contract method 0x3603da84.
//
// Solidity: function GetCurrentWatchtowers() view returns(address[])
func (_Staking *StakingSession) GetCurrentWatchtowers() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentWatchtowers(&_Staking.CallOpts)
}

// GetCurrentWatchtowers is a free data retrieval call binding the contract method 0x3603da84.
//
// Solidity: function GetCurrentWatchtowers() view returns(address[])
func (_Staking *StakingCallerSession) GetCurrentWatchtowers() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentWatchtowers(&_Staking.CallOpts)
}

// GetIsSequencerInProbation is a free data retrieval call binding the contract method 0xa17e8b3d.
//
// Solidity: function GetIsSequencerInProbation(address sequencerAddr) view returns(bool)
func (_Staking *StakingCaller) GetIsSequencerInProbation(opts *bind.CallOpts, sequencerAddr common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetIsSequencerInProbation", sequencerAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetIsSequencerInProbation is a free data retrieval call binding the contract method 0xa17e8b3d.
//
// Solidity: function GetIsSequencerInProbation(address sequencerAddr) view returns(bool)
func (_Staking *StakingSession) GetIsSequencerInProbation(sequencerAddr common.Address) (bool, error) {
	return _Staking.Contract.GetIsSequencerInProbation(&_Staking.CallOpts, sequencerAddr)
}

// GetIsSequencerInProbation is a free data retrieval call binding the contract method 0xa17e8b3d.
//
// Solidity: function GetIsSequencerInProbation(address sequencerAddr) view returns(bool)
func (_Staking *StakingCallerSession) GetIsSequencerInProbation(sequencerAddr common.Address) (bool, error) {
	return _Staking.Contract.GetIsSequencerInProbation(&_Staking.CallOpts, sequencerAddr)
}

// GetMaxNumParticipants is a free data retrieval call binding the contract method 0xc8fa5fe9.
//
// Solidity: function GetMaxNumParticipants() view returns(uint256)
func (_Staking *StakingCaller) GetMaxNumParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetMaxNumParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxNumParticipants is a free data retrieval call binding the contract method 0xc8fa5fe9.
//
// Solidity: function GetMaxNumParticipants() view returns(uint256)
func (_Staking *StakingSession) GetMaxNumParticipants() (*big.Int, error) {
	return _Staking.Contract.GetMaxNumParticipants(&_Staking.CallOpts)
}

// GetMaxNumParticipants is a free data retrieval call binding the contract method 0xc8fa5fe9.
//
// Solidity: function GetMaxNumParticipants() view returns(uint256)
func (_Staking *StakingCallerSession) GetMaxNumParticipants() (*big.Int, error) {
	return _Staking.Contract.GetMaxNumParticipants(&_Staking.CallOpts)
}

// GetMaxNumSequencers is a free data retrieval call binding the contract method 0xc2ccacdf.
//
// Solidity: function GetMaxNumSequencers() view returns(uint256)
func (_Staking *StakingCaller) GetMaxNumSequencers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetMaxNumSequencers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxNumSequencers is a free data retrieval call binding the contract method 0xc2ccacdf.
//
// Solidity: function GetMaxNumSequencers() view returns(uint256)
func (_Staking *StakingSession) GetMaxNumSequencers() (*big.Int, error) {
	return _Staking.Contract.GetMaxNumSequencers(&_Staking.CallOpts)
}

// GetMaxNumSequencers is a free data retrieval call binding the contract method 0xc2ccacdf.
//
// Solidity: function GetMaxNumSequencers() view returns(uint256)
func (_Staking *StakingCallerSession) GetMaxNumSequencers() (*big.Int, error) {
	return _Staking.Contract.GetMaxNumSequencers(&_Staking.CallOpts)
}

// GetMaxNumValidators is a free data retrieval call binding the contract method 0x6edf2481.
//
// Solidity: function GetMaxNumValidators() view returns(uint256)
func (_Staking *StakingCaller) GetMaxNumValidators(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetMaxNumValidators")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxNumValidators is a free data retrieval call binding the contract method 0x6edf2481.
//
// Solidity: function GetMaxNumValidators() view returns(uint256)
func (_Staking *StakingSession) GetMaxNumValidators() (*big.Int, error) {
	return _Staking.Contract.GetMaxNumValidators(&_Staking.CallOpts)
}

// GetMaxNumValidators is a free data retrieval call binding the contract method 0x6edf2481.
//
// Solidity: function GetMaxNumValidators() view returns(uint256)
func (_Staking *StakingCallerSession) GetMaxNumValidators() (*big.Int, error) {
	return _Staking.Contract.GetMaxNumValidators(&_Staking.CallOpts)
}

// GetMaxNumWatchtowers is a free data retrieval call binding the contract method 0xb17ca89c.
//
// Solidity: function GetMaxNumWatchtowers() view returns(uint256)
func (_Staking *StakingCaller) GetMaxNumWatchtowers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetMaxNumWatchtowers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxNumWatchtowers is a free data retrieval call binding the contract method 0xb17ca89c.
//
// Solidity: function GetMaxNumWatchtowers() view returns(uint256)
func (_Staking *StakingSession) GetMaxNumWatchtowers() (*big.Int, error) {
	return _Staking.Contract.GetMaxNumWatchtowers(&_Staking.CallOpts)
}

// GetMaxNumWatchtowers is a free data retrieval call binding the contract method 0xb17ca89c.
//
// Solidity: function GetMaxNumWatchtowers() view returns(uint256)
func (_Staking *StakingCallerSession) GetMaxNumWatchtowers() (*big.Int, error) {
	return _Staking.Contract.GetMaxNumWatchtowers(&_Staking.CallOpts)
}

// GetMinNumParticipants is a free data retrieval call binding the contract method 0xbfc5aeee.
//
// Solidity: function GetMinNumParticipants() view returns(uint256)
func (_Staking *StakingCaller) GetMinNumParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetMinNumParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinNumParticipants is a free data retrieval call binding the contract method 0xbfc5aeee.
//
// Solidity: function GetMinNumParticipants() view returns(uint256)
func (_Staking *StakingSession) GetMinNumParticipants() (*big.Int, error) {
	return _Staking.Contract.GetMinNumParticipants(&_Staking.CallOpts)
}

// GetMinNumParticipants is a free data retrieval call binding the contract method 0xbfc5aeee.
//
// Solidity: function GetMinNumParticipants() view returns(uint256)
func (_Staking *StakingCallerSession) GetMinNumParticipants() (*big.Int, error) {
	return _Staking.Contract.GetMinNumParticipants(&_Staking.CallOpts)
}

// GetMinNumSequencers is a free data retrieval call binding the contract method 0x760118b6.
//
// Solidity: function GetMinNumSequencers() view returns(uint256)
func (_Staking *StakingCaller) GetMinNumSequencers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetMinNumSequencers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinNumSequencers is a free data retrieval call binding the contract method 0x760118b6.
//
// Solidity: function GetMinNumSequencers() view returns(uint256)
func (_Staking *StakingSession) GetMinNumSequencers() (*big.Int, error) {
	return _Staking.Contract.GetMinNumSequencers(&_Staking.CallOpts)
}

// GetMinNumSequencers is a free data retrieval call binding the contract method 0x760118b6.
//
// Solidity: function GetMinNumSequencers() view returns(uint256)
func (_Staking *StakingCallerSession) GetMinNumSequencers() (*big.Int, error) {
	return _Staking.Contract.GetMinNumSequencers(&_Staking.CallOpts)
}

// GetMinNumValidators is a free data retrieval call binding the contract method 0xeec9f52e.
//
// Solidity: function GetMinNumValidators() view returns(uint256)
func (_Staking *StakingCaller) GetMinNumValidators(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetMinNumValidators")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinNumValidators is a free data retrieval call binding the contract method 0xeec9f52e.
//
// Solidity: function GetMinNumValidators() view returns(uint256)
func (_Staking *StakingSession) GetMinNumValidators() (*big.Int, error) {
	return _Staking.Contract.GetMinNumValidators(&_Staking.CallOpts)
}

// GetMinNumValidators is a free data retrieval call binding the contract method 0xeec9f52e.
//
// Solidity: function GetMinNumValidators() view returns(uint256)
func (_Staking *StakingCallerSession) GetMinNumValidators() (*big.Int, error) {
	return _Staking.Contract.GetMinNumValidators(&_Staking.CallOpts)
}

// GetMinNumWatchtowers is a free data retrieval call binding the contract method 0xbd9ed0b3.
//
// Solidity: function GetMinNumWatchtowers() view returns(uint256)
func (_Staking *StakingCaller) GetMinNumWatchtowers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetMinNumWatchtowers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinNumWatchtowers is a free data retrieval call binding the contract method 0xbd9ed0b3.
//
// Solidity: function GetMinNumWatchtowers() view returns(uint256)
func (_Staking *StakingSession) GetMinNumWatchtowers() (*big.Int, error) {
	return _Staking.Contract.GetMinNumWatchtowers(&_Staking.CallOpts)
}

// GetMinNumWatchtowers is a free data retrieval call binding the contract method 0xbd9ed0b3.
//
// Solidity: function GetMinNumWatchtowers() view returns(uint256)
func (_Staking *StakingCallerSession) GetMinNumWatchtowers() (*big.Int, error) {
	return _Staking.Contract.GetMinNumWatchtowers(&_Staking.CallOpts)
}

// GetSlashPercentage is a free data retrieval call binding the contract method 0x57a87ffd.
//
// Solidity: function GetSlashPercentage() view returns(uint256)
func (_Staking *StakingCaller) GetSlashPercentage(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetSlashPercentage")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSlashPercentage is a free data retrieval call binding the contract method 0x57a87ffd.
//
// Solidity: function GetSlashPercentage() view returns(uint256)
func (_Staking *StakingSession) GetSlashPercentage() (*big.Int, error) {
	return _Staking.Contract.GetSlashPercentage(&_Staking.CallOpts)
}

// GetSlashPercentage is a free data retrieval call binding the contract method 0x57a87ffd.
//
// Solidity: function GetSlashPercentage() view returns(uint256)
func (_Staking *StakingCallerSession) GetSlashPercentage() (*big.Int, error) {
	return _Staking.Contract.GetSlashPercentage(&_Staking.CallOpts)
}

// IsSequencer is a free data retrieval call binding the contract method 0xbb5a26ff.
//
// Solidity: function IsSequencer(address addr) view returns(bool)
func (_Staking *StakingCaller) IsSequencer(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "IsSequencer", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSequencer is a free data retrieval call binding the contract method 0xbb5a26ff.
//
// Solidity: function IsSequencer(address addr) view returns(bool)
func (_Staking *StakingSession) IsSequencer(addr common.Address) (bool, error) {
	return _Staking.Contract.IsSequencer(&_Staking.CallOpts, addr)
}

// IsSequencer is a free data retrieval call binding the contract method 0xbb5a26ff.
//
// Solidity: function IsSequencer(address addr) view returns(bool)
func (_Staking *StakingCallerSession) IsSequencer(addr common.Address) (bool, error) {
	return _Staking.Contract.IsSequencer(&_Staking.CallOpts, addr)
}

// IsValidator is a free data retrieval call binding the contract method 0x98ff822d.
//
// Solidity: function IsValidator(address addr) view returns(bool)
func (_Staking *StakingCaller) IsValidator(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "IsValidator", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0x98ff822d.
//
// Solidity: function IsValidator(address addr) view returns(bool)
func (_Staking *StakingSession) IsValidator(addr common.Address) (bool, error) {
	return _Staking.Contract.IsValidator(&_Staking.CallOpts, addr)
}

// IsValidator is a free data retrieval call binding the contract method 0x98ff822d.
//
// Solidity: function IsValidator(address addr) view returns(bool)
func (_Staking *StakingCallerSession) IsValidator(addr common.Address) (bool, error) {
	return _Staking.Contract.IsValidator(&_Staking.CallOpts, addr)
}

// IsWatchtower is a free data retrieval call binding the contract method 0xe2b5769d.
//
// Solidity: function IsWatchtower(address addr) view returns(bool)
func (_Staking *StakingCaller) IsWatchtower(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "IsWatchtower", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsWatchtower is a free data retrieval call binding the contract method 0xe2b5769d.
//
// Solidity: function IsWatchtower(address addr) view returns(bool)
func (_Staking *StakingSession) IsWatchtower(addr common.Address) (bool, error) {
	return _Staking.Contract.IsWatchtower(&_Staking.CallOpts, addr)
}

// IsWatchtower is a free data retrieval call binding the contract method 0xe2b5769d.
//
// Solidity: function IsWatchtower(address addr) view returns(bool)
func (_Staking *StakingCallerSession) IsWatchtower(addr common.Address) (bool, error) {
	return _Staking.Contract.IsWatchtower(&_Staking.CallOpts, addr)
}

// NODESEQUENCER is a free data retrieval call binding the contract method 0x855598b7.
//
// Solidity: function NODE_SEQUENCER() view returns(string)
func (_Staking *StakingCaller) NODESEQUENCER(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "NODE_SEQUENCER")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NODESEQUENCER is a free data retrieval call binding the contract method 0x855598b7.
//
// Solidity: function NODE_SEQUENCER() view returns(string)
func (_Staking *StakingSession) NODESEQUENCER() (string, error) {
	return _Staking.Contract.NODESEQUENCER(&_Staking.CallOpts)
}

// NODESEQUENCER is a free data retrieval call binding the contract method 0x855598b7.
//
// Solidity: function NODE_SEQUENCER() view returns(string)
func (_Staking *StakingCallerSession) NODESEQUENCER() (string, error) {
	return _Staking.Contract.NODESEQUENCER(&_Staking.CallOpts)
}

// NODEVALIDATOR is a free data retrieval call binding the contract method 0x9a083e82.
//
// Solidity: function NODE_VALIDATOR() view returns(string)
func (_Staking *StakingCaller) NODEVALIDATOR(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "NODE_VALIDATOR")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NODEVALIDATOR is a free data retrieval call binding the contract method 0x9a083e82.
//
// Solidity: function NODE_VALIDATOR() view returns(string)
func (_Staking *StakingSession) NODEVALIDATOR() (string, error) {
	return _Staking.Contract.NODEVALIDATOR(&_Staking.CallOpts)
}

// NODEVALIDATOR is a free data retrieval call binding the contract method 0x9a083e82.
//
// Solidity: function NODE_VALIDATOR() view returns(string)
func (_Staking *StakingCallerSession) NODEVALIDATOR() (string, error) {
	return _Staking.Contract.NODEVALIDATOR(&_Staking.CallOpts)
}

// NODEWATCHTOWER is a free data retrieval call binding the contract method 0x9f9f7101.
//
// Solidity: function NODE_WATCHTOWER() view returns(string)
func (_Staking *StakingCaller) NODEWATCHTOWER(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "NODE_WATCHTOWER")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NODEWATCHTOWER is a free data retrieval call binding the contract method 0x9f9f7101.
//
// Solidity: function NODE_WATCHTOWER() view returns(string)
func (_Staking *StakingSession) NODEWATCHTOWER() (string, error) {
	return _Staking.Contract.NODEWATCHTOWER(&_Staking.CallOpts)
}

// NODEWATCHTOWER is a free data retrieval call binding the contract method 0x9f9f7101.
//
// Solidity: function NODE_WATCHTOWER() view returns(string)
func (_Staking *StakingCallerSession) NODEWATCHTOWER() (string, error) {
	return _Staking.Contract.NODEWATCHTOWER(&_Staking.CallOpts)
}

// AddressToIsParticipant is a free data retrieval call binding the contract method 0xc70966fb.
//
// Solidity: function _addressToIsParticipant(address ) view returns(bool)
func (_Staking *StakingCaller) AddressToIsParticipant(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToIsParticipant", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AddressToIsParticipant is a free data retrieval call binding the contract method 0xc70966fb.
//
// Solidity: function _addressToIsParticipant(address ) view returns(bool)
func (_Staking *StakingSession) AddressToIsParticipant(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsParticipant(&_Staking.CallOpts, arg0)
}

// AddressToIsParticipant is a free data retrieval call binding the contract method 0xc70966fb.
//
// Solidity: function _addressToIsParticipant(address ) view returns(bool)
func (_Staking *StakingCallerSession) AddressToIsParticipant(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsParticipant(&_Staking.CallOpts, arg0)
}

// AddressToIsSequencer is a free data retrieval call binding the contract method 0x7b339263.
//
// Solidity: function _addressToIsSequencer(address ) view returns(bool)
func (_Staking *StakingCaller) AddressToIsSequencer(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToIsSequencer", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AddressToIsSequencer is a free data retrieval call binding the contract method 0x7b339263.
//
// Solidity: function _addressToIsSequencer(address ) view returns(bool)
func (_Staking *StakingSession) AddressToIsSequencer(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsSequencer(&_Staking.CallOpts, arg0)
}

// AddressToIsSequencer is a free data retrieval call binding the contract method 0x7b339263.
//
// Solidity: function _addressToIsSequencer(address ) view returns(bool)
func (_Staking *StakingCallerSession) AddressToIsSequencer(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsSequencer(&_Staking.CallOpts, arg0)
}

// AddressToIsSequencerInProbationAddr is a free data retrieval call binding the contract method 0x1efcf4d1.
//
// Solidity: function _addressToIsSequencerInProbationAddr(address ) view returns(bool)
func (_Staking *StakingCaller) AddressToIsSequencerInProbationAddr(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToIsSequencerInProbationAddr", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AddressToIsSequencerInProbationAddr is a free data retrieval call binding the contract method 0x1efcf4d1.
//
// Solidity: function _addressToIsSequencerInProbationAddr(address ) view returns(bool)
func (_Staking *StakingSession) AddressToIsSequencerInProbationAddr(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsSequencerInProbationAddr(&_Staking.CallOpts, arg0)
}

// AddressToIsSequencerInProbationAddr is a free data retrieval call binding the contract method 0x1efcf4d1.
//
// Solidity: function _addressToIsSequencerInProbationAddr(address ) view returns(bool)
func (_Staking *StakingCallerSession) AddressToIsSequencerInProbationAddr(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsSequencerInProbationAddr(&_Staking.CallOpts, arg0)
}

// AddressToIsValidator is a free data retrieval call binding the contract method 0x065ae171.
//
// Solidity: function _addressToIsValidator(address ) view returns(bool)
func (_Staking *StakingCaller) AddressToIsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToIsValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AddressToIsValidator is a free data retrieval call binding the contract method 0x065ae171.
//
// Solidity: function _addressToIsValidator(address ) view returns(bool)
func (_Staking *StakingSession) AddressToIsValidator(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsValidator(&_Staking.CallOpts, arg0)
}

// AddressToIsValidator is a free data retrieval call binding the contract method 0x065ae171.
//
// Solidity: function _addressToIsValidator(address ) view returns(bool)
func (_Staking *StakingCallerSession) AddressToIsValidator(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsValidator(&_Staking.CallOpts, arg0)
}

// AddressToIsWatchtower is a free data retrieval call binding the contract method 0x40b00753.
//
// Solidity: function _addressToIsWatchtower(address ) view returns(bool)
func (_Staking *StakingCaller) AddressToIsWatchtower(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToIsWatchtower", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AddressToIsWatchtower is a free data retrieval call binding the contract method 0x40b00753.
//
// Solidity: function _addressToIsWatchtower(address ) view returns(bool)
func (_Staking *StakingSession) AddressToIsWatchtower(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsWatchtower(&_Staking.CallOpts, arg0)
}

// AddressToIsWatchtower is a free data retrieval call binding the contract method 0x40b00753.
//
// Solidity: function _addressToIsWatchtower(address ) view returns(bool)
func (_Staking *StakingCallerSession) AddressToIsWatchtower(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsWatchtower(&_Staking.CallOpts, arg0)
}

// AddressToNodeType is a free data retrieval call binding the contract method 0x19ae6764.
//
// Solidity: function _addressToNodeType(address ) view returns(string)
func (_Staking *StakingCaller) AddressToNodeType(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToNodeType", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AddressToNodeType is a free data retrieval call binding the contract method 0x19ae6764.
//
// Solidity: function _addressToNodeType(address ) view returns(string)
func (_Staking *StakingSession) AddressToNodeType(arg0 common.Address) (string, error) {
	return _Staking.Contract.AddressToNodeType(&_Staking.CallOpts, arg0)
}

// AddressToNodeType is a free data retrieval call binding the contract method 0x19ae6764.
//
// Solidity: function _addressToNodeType(address ) view returns(string)
func (_Staking *StakingCallerSession) AddressToNodeType(arg0 common.Address) (string, error) {
	return _Staking.Contract.AddressToNodeType(&_Staking.CallOpts, arg0)
}

// AddressToParticipantIndex is a free data retrieval call binding the contract method 0xb8889f02.
//
// Solidity: function _addressToParticipantIndex(address ) view returns(uint256)
func (_Staking *StakingCaller) AddressToParticipantIndex(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToParticipantIndex", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressToParticipantIndex is a free data retrieval call binding the contract method 0xb8889f02.
//
// Solidity: function _addressToParticipantIndex(address ) view returns(uint256)
func (_Staking *StakingSession) AddressToParticipantIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToParticipantIndex(&_Staking.CallOpts, arg0)
}

// AddressToParticipantIndex is a free data retrieval call binding the contract method 0xb8889f02.
//
// Solidity: function _addressToParticipantIndex(address ) view returns(uint256)
func (_Staking *StakingCallerSession) AddressToParticipantIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToParticipantIndex(&_Staking.CallOpts, arg0)
}

// AddressToSequencerInProbationIndex is a free data retrieval call binding the contract method 0x0e533c8e.
//
// Solidity: function _addressToSequencerInProbationIndex(address ) view returns(uint256)
func (_Staking *StakingCaller) AddressToSequencerInProbationIndex(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToSequencerInProbationIndex", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressToSequencerInProbationIndex is a free data retrieval call binding the contract method 0x0e533c8e.
//
// Solidity: function _addressToSequencerInProbationIndex(address ) view returns(uint256)
func (_Staking *StakingSession) AddressToSequencerInProbationIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToSequencerInProbationIndex(&_Staking.CallOpts, arg0)
}

// AddressToSequencerInProbationIndex is a free data retrieval call binding the contract method 0x0e533c8e.
//
// Solidity: function _addressToSequencerInProbationIndex(address ) view returns(uint256)
func (_Staking *StakingCallerSession) AddressToSequencerInProbationIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToSequencerInProbationIndex(&_Staking.CallOpts, arg0)
}

// AddressToSequencerIndex is a free data retrieval call binding the contract method 0x1cb9bdca.
//
// Solidity: function _addressToSequencerIndex(address ) view returns(uint256)
func (_Staking *StakingCaller) AddressToSequencerIndex(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToSequencerIndex", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressToSequencerIndex is a free data retrieval call binding the contract method 0x1cb9bdca.
//
// Solidity: function _addressToSequencerIndex(address ) view returns(uint256)
func (_Staking *StakingSession) AddressToSequencerIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToSequencerIndex(&_Staking.CallOpts, arg0)
}

// AddressToSequencerIndex is a free data retrieval call binding the contract method 0x1cb9bdca.
//
// Solidity: function _addressToSequencerIndex(address ) view returns(uint256)
func (_Staking *StakingCallerSession) AddressToSequencerIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToSequencerIndex(&_Staking.CallOpts, arg0)
}

// AddressToStakedAmount is a free data retrieval call binding the contract method 0x7dceceb8.
//
// Solidity: function _addressToStakedAmount(address ) view returns(uint256)
func (_Staking *StakingCaller) AddressToStakedAmount(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToStakedAmount", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressToStakedAmount is a free data retrieval call binding the contract method 0x7dceceb8.
//
// Solidity: function _addressToStakedAmount(address ) view returns(uint256)
func (_Staking *StakingSession) AddressToStakedAmount(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToStakedAmount(&_Staking.CallOpts, arg0)
}

// AddressToStakedAmount is a free data retrieval call binding the contract method 0x7dceceb8.
//
// Solidity: function _addressToStakedAmount(address ) view returns(uint256)
func (_Staking *StakingCallerSession) AddressToStakedAmount(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToStakedAmount(&_Staking.CallOpts, arg0)
}

// AddressToValidatorIndex is a free data retrieval call binding the contract method 0x02b75199.
//
// Solidity: function _addressToValidatorIndex(address ) view returns(uint256)
func (_Staking *StakingCaller) AddressToValidatorIndex(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToValidatorIndex", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressToValidatorIndex is a free data retrieval call binding the contract method 0x02b75199.
//
// Solidity: function _addressToValidatorIndex(address ) view returns(uint256)
func (_Staking *StakingSession) AddressToValidatorIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToValidatorIndex(&_Staking.CallOpts, arg0)
}

// AddressToValidatorIndex is a free data retrieval call binding the contract method 0x02b75199.
//
// Solidity: function _addressToValidatorIndex(address ) view returns(uint256)
func (_Staking *StakingCallerSession) AddressToValidatorIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToValidatorIndex(&_Staking.CallOpts, arg0)
}

// AddressToWatchtowerIndex is a free data retrieval call binding the contract method 0xa0f14bff.
//
// Solidity: function _addressToWatchtowerIndex(address ) view returns(uint256)
func (_Staking *StakingCaller) AddressToWatchtowerIndex(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToWatchtowerIndex", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressToWatchtowerIndex is a free data retrieval call binding the contract method 0xa0f14bff.
//
// Solidity: function _addressToWatchtowerIndex(address ) view returns(uint256)
func (_Staking *StakingSession) AddressToWatchtowerIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToWatchtowerIndex(&_Staking.CallOpts, arg0)
}

// AddressToWatchtowerIndex is a free data retrieval call binding the contract method 0xa0f14bff.
//
// Solidity: function _addressToWatchtowerIndex(address ) view returns(uint256)
func (_Staking *StakingCallerSession) AddressToWatchtowerIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToWatchtowerIndex(&_Staking.CallOpts, arg0)
}

// MaximumNumParticipants is a free data retrieval call binding the contract method 0x068946e8.
//
// Solidity: function _maximumNumParticipants() view returns(uint256)
func (_Staking *StakingCaller) MaximumNumParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_maximumNumParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaximumNumParticipants is a free data retrieval call binding the contract method 0x068946e8.
//
// Solidity: function _maximumNumParticipants() view returns(uint256)
func (_Staking *StakingSession) MaximumNumParticipants() (*big.Int, error) {
	return _Staking.Contract.MaximumNumParticipants(&_Staking.CallOpts)
}

// MaximumNumParticipants is a free data retrieval call binding the contract method 0x068946e8.
//
// Solidity: function _maximumNumParticipants() view returns(uint256)
func (_Staking *StakingCallerSession) MaximumNumParticipants() (*big.Int, error) {
	return _Staking.Contract.MaximumNumParticipants(&_Staking.CallOpts)
}

// MaximumNumSequencers is a free data retrieval call binding the contract method 0x0fb18ccc.
//
// Solidity: function _maximumNumSequencers() view returns(uint256)
func (_Staking *StakingCaller) MaximumNumSequencers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_maximumNumSequencers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaximumNumSequencers is a free data retrieval call binding the contract method 0x0fb18ccc.
//
// Solidity: function _maximumNumSequencers() view returns(uint256)
func (_Staking *StakingSession) MaximumNumSequencers() (*big.Int, error) {
	return _Staking.Contract.MaximumNumSequencers(&_Staking.CallOpts)
}

// MaximumNumSequencers is a free data retrieval call binding the contract method 0x0fb18ccc.
//
// Solidity: function _maximumNumSequencers() view returns(uint256)
func (_Staking *StakingCallerSession) MaximumNumSequencers() (*big.Int, error) {
	return _Staking.Contract.MaximumNumSequencers(&_Staking.CallOpts)
}

// MaximumNumValidators is a free data retrieval call binding the contract method 0xaf6da36e.
//
// Solidity: function _maximumNumValidators() view returns(uint256)
func (_Staking *StakingCaller) MaximumNumValidators(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_maximumNumValidators")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaximumNumValidators is a free data retrieval call binding the contract method 0xaf6da36e.
//
// Solidity: function _maximumNumValidators() view returns(uint256)
func (_Staking *StakingSession) MaximumNumValidators() (*big.Int, error) {
	return _Staking.Contract.MaximumNumValidators(&_Staking.CallOpts)
}

// MaximumNumValidators is a free data retrieval call binding the contract method 0xaf6da36e.
//
// Solidity: function _maximumNumValidators() view returns(uint256)
func (_Staking *StakingCallerSession) MaximumNumValidators() (*big.Int, error) {
	return _Staking.Contract.MaximumNumValidators(&_Staking.CallOpts)
}

// MaximumNumWatchtowers is a free data retrieval call binding the contract method 0x90e7c862.
//
// Solidity: function _maximumNumWatchtowers() view returns(uint256)
func (_Staking *StakingCaller) MaximumNumWatchtowers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_maximumNumWatchtowers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaximumNumWatchtowers is a free data retrieval call binding the contract method 0x90e7c862.
//
// Solidity: function _maximumNumWatchtowers() view returns(uint256)
func (_Staking *StakingSession) MaximumNumWatchtowers() (*big.Int, error) {
	return _Staking.Contract.MaximumNumWatchtowers(&_Staking.CallOpts)
}

// MaximumNumWatchtowers is a free data retrieval call binding the contract method 0x90e7c862.
//
// Solidity: function _maximumNumWatchtowers() view returns(uint256)
func (_Staking *StakingCallerSession) MaximumNumWatchtowers() (*big.Int, error) {
	return _Staking.Contract.MaximumNumWatchtowers(&_Staking.CallOpts)
}

// MinStakingThreshold is a free data retrieval call binding the contract method 0xa1450126.
//
// Solidity: function _minStakingThreshold() view returns(uint256)
func (_Staking *StakingCaller) MinStakingThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_minStakingThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinStakingThreshold is a free data retrieval call binding the contract method 0xa1450126.
//
// Solidity: function _minStakingThreshold() view returns(uint256)
func (_Staking *StakingSession) MinStakingThreshold() (*big.Int, error) {
	return _Staking.Contract.MinStakingThreshold(&_Staking.CallOpts)
}

// MinStakingThreshold is a free data retrieval call binding the contract method 0xa1450126.
//
// Solidity: function _minStakingThreshold() view returns(uint256)
func (_Staking *StakingCallerSession) MinStakingThreshold() (*big.Int, error) {
	return _Staking.Contract.MinStakingThreshold(&_Staking.CallOpts)
}

// MinimumNumParticipants is a free data retrieval call binding the contract method 0xc6199c1f.
//
// Solidity: function _minimumNumParticipants() view returns(uint256)
func (_Staking *StakingCaller) MinimumNumParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_minimumNumParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumNumParticipants is a free data retrieval call binding the contract method 0xc6199c1f.
//
// Solidity: function _minimumNumParticipants() view returns(uint256)
func (_Staking *StakingSession) MinimumNumParticipants() (*big.Int, error) {
	return _Staking.Contract.MinimumNumParticipants(&_Staking.CallOpts)
}

// MinimumNumParticipants is a free data retrieval call binding the contract method 0xc6199c1f.
//
// Solidity: function _minimumNumParticipants() view returns(uint256)
func (_Staking *StakingCallerSession) MinimumNumParticipants() (*big.Int, error) {
	return _Staking.Contract.MinimumNumParticipants(&_Staking.CallOpts)
}

// MinimumNumSequencers is a free data retrieval call binding the contract method 0x8d084148.
//
// Solidity: function _minimumNumSequencers() view returns(uint256)
func (_Staking *StakingCaller) MinimumNumSequencers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_minimumNumSequencers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumNumSequencers is a free data retrieval call binding the contract method 0x8d084148.
//
// Solidity: function _minimumNumSequencers() view returns(uint256)
func (_Staking *StakingSession) MinimumNumSequencers() (*big.Int, error) {
	return _Staking.Contract.MinimumNumSequencers(&_Staking.CallOpts)
}

// MinimumNumSequencers is a free data retrieval call binding the contract method 0x8d084148.
//
// Solidity: function _minimumNumSequencers() view returns(uint256)
func (_Staking *StakingCallerSession) MinimumNumSequencers() (*big.Int, error) {
	return _Staking.Contract.MinimumNumSequencers(&_Staking.CallOpts)
}

// MinimumNumValidators is a free data retrieval call binding the contract method 0xc795c077.
//
// Solidity: function _minimumNumValidators() view returns(uint256)
func (_Staking *StakingCaller) MinimumNumValidators(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_minimumNumValidators")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumNumValidators is a free data retrieval call binding the contract method 0xc795c077.
//
// Solidity: function _minimumNumValidators() view returns(uint256)
func (_Staking *StakingSession) MinimumNumValidators() (*big.Int, error) {
	return _Staking.Contract.MinimumNumValidators(&_Staking.CallOpts)
}

// MinimumNumValidators is a free data retrieval call binding the contract method 0xc795c077.
//
// Solidity: function _minimumNumValidators() view returns(uint256)
func (_Staking *StakingCallerSession) MinimumNumValidators() (*big.Int, error) {
	return _Staking.Contract.MinimumNumValidators(&_Staking.CallOpts)
}

// MinimumNumWatchtowers is a free data retrieval call binding the contract method 0xf76a1ee0.
//
// Solidity: function _minimumNumWatchtowers() view returns(uint256)
func (_Staking *StakingCaller) MinimumNumWatchtowers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_minimumNumWatchtowers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumNumWatchtowers is a free data retrieval call binding the contract method 0xf76a1ee0.
//
// Solidity: function _minimumNumWatchtowers() view returns(uint256)
func (_Staking *StakingSession) MinimumNumWatchtowers() (*big.Int, error) {
	return _Staking.Contract.MinimumNumWatchtowers(&_Staking.CallOpts)
}

// MinimumNumWatchtowers is a free data retrieval call binding the contract method 0xf76a1ee0.
//
// Solidity: function _minimumNumWatchtowers() view returns(uint256)
func (_Staking *StakingCallerSession) MinimumNumWatchtowers() (*big.Int, error) {
	return _Staking.Contract.MinimumNumWatchtowers(&_Staking.CallOpts)
}

// Participants is a free data retrieval call binding the contract method 0xf196f824.
//
// Solidity: function _participants(uint256 ) view returns(address)
func (_Staking *StakingCaller) Participants(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_participants", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Participants is a free data retrieval call binding the contract method 0xf196f824.
//
// Solidity: function _participants(uint256 ) view returns(address)
func (_Staking *StakingSession) Participants(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Participants(&_Staking.CallOpts, arg0)
}

// Participants is a free data retrieval call binding the contract method 0xf196f824.
//
// Solidity: function _participants(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) Participants(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Participants(&_Staking.CallOpts, arg0)
}

// Sequencers is a free data retrieval call binding the contract method 0x19908df8.
//
// Solidity: function _sequencers(uint256 ) view returns(address)
func (_Staking *StakingCaller) Sequencers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_sequencers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Sequencers is a free data retrieval call binding the contract method 0x19908df8.
//
// Solidity: function _sequencers(uint256 ) view returns(address)
func (_Staking *StakingSession) Sequencers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Sequencers(&_Staking.CallOpts, arg0)
}

// Sequencers is a free data retrieval call binding the contract method 0x19908df8.
//
// Solidity: function _sequencers(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) Sequencers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Sequencers(&_Staking.CallOpts, arg0)
}

// SequencersInProbation is a free data retrieval call binding the contract method 0x584060bb.
//
// Solidity: function _sequencers_in_probation(uint256 ) view returns(address)
func (_Staking *StakingCaller) SequencersInProbation(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_sequencers_in_probation", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencersInProbation is a free data retrieval call binding the contract method 0x584060bb.
//
// Solidity: function _sequencers_in_probation(uint256 ) view returns(address)
func (_Staking *StakingSession) SequencersInProbation(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.SequencersInProbation(&_Staking.CallOpts, arg0)
}

// SequencersInProbation is a free data retrieval call binding the contract method 0x584060bb.
//
// Solidity: function _sequencers_in_probation(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) SequencersInProbation(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.SequencersInProbation(&_Staking.CallOpts, arg0)
}

// SlashPercentage is a free data retrieval call binding the contract method 0xd551832f.
//
// Solidity: function _slashPercentage() view returns(uint256)
func (_Staking *StakingCaller) SlashPercentage(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_slashPercentage")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SlashPercentage is a free data retrieval call binding the contract method 0xd551832f.
//
// Solidity: function _slashPercentage() view returns(uint256)
func (_Staking *StakingSession) SlashPercentage() (*big.Int, error) {
	return _Staking.Contract.SlashPercentage(&_Staking.CallOpts)
}

// SlashPercentage is a free data retrieval call binding the contract method 0xd551832f.
//
// Solidity: function _slashPercentage() view returns(uint256)
func (_Staking *StakingCallerSession) SlashPercentage() (*big.Int, error) {
	return _Staking.Contract.SlashPercentage(&_Staking.CallOpts)
}

// StakedAmount is a free data retrieval call binding the contract method 0xe387a7ed.
//
// Solidity: function _stakedAmount() view returns(uint256)
func (_Staking *StakingCaller) StakedAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_stakedAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakedAmount is a free data retrieval call binding the contract method 0xe387a7ed.
//
// Solidity: function _stakedAmount() view returns(uint256)
func (_Staking *StakingSession) StakedAmount() (*big.Int, error) {
	return _Staking.Contract.StakedAmount(&_Staking.CallOpts)
}

// StakedAmount is a free data retrieval call binding the contract method 0xe387a7ed.
//
// Solidity: function _stakedAmount() view returns(uint256)
func (_Staking *StakingCallerSession) StakedAmount() (*big.Int, error) {
	return _Staking.Contract.StakedAmount(&_Staking.CallOpts)
}

// Validators is a free data retrieval call binding the contract method 0xf90ecacc.
//
// Solidity: function _validators(uint256 ) view returns(address)
func (_Staking *StakingCaller) Validators(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_validators", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Validators is a free data retrieval call binding the contract method 0xf90ecacc.
//
// Solidity: function _validators(uint256 ) view returns(address)
func (_Staking *StakingSession) Validators(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Validators(&_Staking.CallOpts, arg0)
}

// Validators is a free data retrieval call binding the contract method 0xf90ecacc.
//
// Solidity: function _validators(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) Validators(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Validators(&_Staking.CallOpts, arg0)
}

// Watchtowers is a free data retrieval call binding the contract method 0xc48c5f37.
//
// Solidity: function _watchtowers(uint256 ) view returns(address)
func (_Staking *StakingCaller) Watchtowers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_watchtowers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Watchtowers is a free data retrieval call binding the contract method 0xc48c5f37.
//
// Solidity: function _watchtowers(uint256 ) view returns(address)
func (_Staking *StakingSession) Watchtowers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Watchtowers(&_Staking.CallOpts, arg0)
}

// Watchtowers is a free data retrieval call binding the contract method 0xc48c5f37.
//
// Solidity: function _watchtowers(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) Watchtowers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Watchtowers(&_Staking.CallOpts, arg0)
}

// BeginDisputeResolution is a paid mutator transaction binding the contract method 0x6b2f7635.
//
// Solidity: function BeginDisputeResolution(address sequencerAddr) returns()
func (_Staking *StakingTransactor) BeginDisputeResolution(opts *bind.TransactOpts, sequencerAddr common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "BeginDisputeResolution", sequencerAddr)
}

// BeginDisputeResolution is a paid mutator transaction binding the contract method 0x6b2f7635.
//
// Solidity: function BeginDisputeResolution(address sequencerAddr) returns()
func (_Staking *StakingSession) BeginDisputeResolution(sequencerAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.BeginDisputeResolution(&_Staking.TransactOpts, sequencerAddr)
}

// BeginDisputeResolution is a paid mutator transaction binding the contract method 0x6b2f7635.
//
// Solidity: function BeginDisputeResolution(address sequencerAddr) returns()
func (_Staking *StakingTransactorSession) BeginDisputeResolution(sequencerAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.BeginDisputeResolution(&_Staking.TransactOpts, sequencerAddr)
}

// EndDisputeResolution is a paid mutator transaction binding the contract method 0xebe4ad6f.
//
// Solidity: function EndDisputeResolution(address sequencerAddr) returns()
func (_Staking *StakingTransactor) EndDisputeResolution(opts *bind.TransactOpts, sequencerAddr common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "EndDisputeResolution", sequencerAddr)
}

// EndDisputeResolution is a paid mutator transaction binding the contract method 0xebe4ad6f.
//
// Solidity: function EndDisputeResolution(address sequencerAddr) returns()
func (_Staking *StakingSession) EndDisputeResolution(sequencerAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.EndDisputeResolution(&_Staking.TransactOpts, sequencerAddr)
}

// EndDisputeResolution is a paid mutator transaction binding the contract method 0xebe4ad6f.
//
// Solidity: function EndDisputeResolution(address sequencerAddr) returns()
func (_Staking *StakingTransactorSession) EndDisputeResolution(sequencerAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.EndDisputeResolution(&_Staking.TransactOpts, sequencerAddr)
}

// SetMaxNumParticipants is a paid mutator transaction binding the contract method 0xe028aadf.
//
// Solidity: function SetMaxNumParticipants(uint256 maximumNumParticipants) returns(uint256)
func (_Staking *StakingTransactor) SetMaxNumParticipants(opts *bind.TransactOpts, maximumNumParticipants *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetMaxNumParticipants", maximumNumParticipants)
}

// SetMaxNumParticipants is a paid mutator transaction binding the contract method 0xe028aadf.
//
// Solidity: function SetMaxNumParticipants(uint256 maximumNumParticipants) returns(uint256)
func (_Staking *StakingSession) SetMaxNumParticipants(maximumNumParticipants *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMaxNumParticipants(&_Staking.TransactOpts, maximumNumParticipants)
}

// SetMaxNumParticipants is a paid mutator transaction binding the contract method 0xe028aadf.
//
// Solidity: function SetMaxNumParticipants(uint256 maximumNumParticipants) returns(uint256)
func (_Staking *StakingTransactorSession) SetMaxNumParticipants(maximumNumParticipants *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMaxNumParticipants(&_Staking.TransactOpts, maximumNumParticipants)
}

// SetMaxNumSequencers is a paid mutator transaction binding the contract method 0xf9a43d4c.
//
// Solidity: function SetMaxNumSequencers(uint256 maximumNumSequencers) returns(uint256)
func (_Staking *StakingTransactor) SetMaxNumSequencers(opts *bind.TransactOpts, maximumNumSequencers *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetMaxNumSequencers", maximumNumSequencers)
}

// SetMaxNumSequencers is a paid mutator transaction binding the contract method 0xf9a43d4c.
//
// Solidity: function SetMaxNumSequencers(uint256 maximumNumSequencers) returns(uint256)
func (_Staking *StakingSession) SetMaxNumSequencers(maximumNumSequencers *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMaxNumSequencers(&_Staking.TransactOpts, maximumNumSequencers)
}

// SetMaxNumSequencers is a paid mutator transaction binding the contract method 0xf9a43d4c.
//
// Solidity: function SetMaxNumSequencers(uint256 maximumNumSequencers) returns(uint256)
func (_Staking *StakingTransactorSession) SetMaxNumSequencers(maximumNumSequencers *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMaxNumSequencers(&_Staking.TransactOpts, maximumNumSequencers)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0xdea79774.
//
// Solidity: function SetMaxNumValidators(uint256 maximumNumValidators) returns(uint256)
func (_Staking *StakingTransactor) SetMaxNumValidators(opts *bind.TransactOpts, maximumNumValidators *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetMaxNumValidators", maximumNumValidators)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0xdea79774.
//
// Solidity: function SetMaxNumValidators(uint256 maximumNumValidators) returns(uint256)
func (_Staking *StakingSession) SetMaxNumValidators(maximumNumValidators *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMaxNumValidators(&_Staking.TransactOpts, maximumNumValidators)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0xdea79774.
//
// Solidity: function SetMaxNumValidators(uint256 maximumNumValidators) returns(uint256)
func (_Staking *StakingTransactorSession) SetMaxNumValidators(maximumNumValidators *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMaxNumValidators(&_Staking.TransactOpts, maximumNumValidators)
}

// SetMaxNumWatchtowers is a paid mutator transaction binding the contract method 0xd147c387.
//
// Solidity: function SetMaxNumWatchtowers(uint256 maximumNumWatchtowers) returns(uint256)
func (_Staking *StakingTransactor) SetMaxNumWatchtowers(opts *bind.TransactOpts, maximumNumWatchtowers *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetMaxNumWatchtowers", maximumNumWatchtowers)
}

// SetMaxNumWatchtowers is a paid mutator transaction binding the contract method 0xd147c387.
//
// Solidity: function SetMaxNumWatchtowers(uint256 maximumNumWatchtowers) returns(uint256)
func (_Staking *StakingSession) SetMaxNumWatchtowers(maximumNumWatchtowers *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMaxNumWatchtowers(&_Staking.TransactOpts, maximumNumWatchtowers)
}

// SetMaxNumWatchtowers is a paid mutator transaction binding the contract method 0xd147c387.
//
// Solidity: function SetMaxNumWatchtowers(uint256 maximumNumWatchtowers) returns(uint256)
func (_Staking *StakingTransactorSession) SetMaxNumWatchtowers(maximumNumWatchtowers *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMaxNumWatchtowers(&_Staking.TransactOpts, maximumNumWatchtowers)
}

// SetMinNumParticipants is a paid mutator transaction binding the contract method 0x98abb25e.
//
// Solidity: function SetMinNumParticipants(uint256 minimumNumParticipants) returns(uint256)
func (_Staking *StakingTransactor) SetMinNumParticipants(opts *bind.TransactOpts, minimumNumParticipants *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetMinNumParticipants", minimumNumParticipants)
}

// SetMinNumParticipants is a paid mutator transaction binding the contract method 0x98abb25e.
//
// Solidity: function SetMinNumParticipants(uint256 minimumNumParticipants) returns(uint256)
func (_Staking *StakingSession) SetMinNumParticipants(minimumNumParticipants *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinNumParticipants(&_Staking.TransactOpts, minimumNumParticipants)
}

// SetMinNumParticipants is a paid mutator transaction binding the contract method 0x98abb25e.
//
// Solidity: function SetMinNumParticipants(uint256 minimumNumParticipants) returns(uint256)
func (_Staking *StakingTransactorSession) SetMinNumParticipants(minimumNumParticipants *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinNumParticipants(&_Staking.TransactOpts, minimumNumParticipants)
}

// SetMinNumSequencers is a paid mutator transaction binding the contract method 0xb61b127f.
//
// Solidity: function SetMinNumSequencers(uint256 minimumNumSequencers) returns(uint256)
func (_Staking *StakingTransactor) SetMinNumSequencers(opts *bind.TransactOpts, minimumNumSequencers *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetMinNumSequencers", minimumNumSequencers)
}

// SetMinNumSequencers is a paid mutator transaction binding the contract method 0xb61b127f.
//
// Solidity: function SetMinNumSequencers(uint256 minimumNumSequencers) returns(uint256)
func (_Staking *StakingSession) SetMinNumSequencers(minimumNumSequencers *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinNumSequencers(&_Staking.TransactOpts, minimumNumSequencers)
}

// SetMinNumSequencers is a paid mutator transaction binding the contract method 0xb61b127f.
//
// Solidity: function SetMinNumSequencers(uint256 minimumNumSequencers) returns(uint256)
func (_Staking *StakingTransactorSession) SetMinNumSequencers(minimumNumSequencers *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinNumSequencers(&_Staking.TransactOpts, minimumNumSequencers)
}

// SetMinNumValidators is a paid mutator transaction binding the contract method 0x560854f6.
//
// Solidity: function SetMinNumValidators(uint256 minimumNumValidators) returns(uint256)
func (_Staking *StakingTransactor) SetMinNumValidators(opts *bind.TransactOpts, minimumNumValidators *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetMinNumValidators", minimumNumValidators)
}

// SetMinNumValidators is a paid mutator transaction binding the contract method 0x560854f6.
//
// Solidity: function SetMinNumValidators(uint256 minimumNumValidators) returns(uint256)
func (_Staking *StakingSession) SetMinNumValidators(minimumNumValidators *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinNumValidators(&_Staking.TransactOpts, minimumNumValidators)
}

// SetMinNumValidators is a paid mutator transaction binding the contract method 0x560854f6.
//
// Solidity: function SetMinNumValidators(uint256 minimumNumValidators) returns(uint256)
func (_Staking *StakingTransactorSession) SetMinNumValidators(minimumNumValidators *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinNumValidators(&_Staking.TransactOpts, minimumNumValidators)
}

// SetMinNumWatchtowers is a paid mutator transaction binding the contract method 0xd80ff2b9.
//
// Solidity: function SetMinNumWatchtowers(uint256 minimumNumWatchtowers) returns(uint256)
func (_Staking *StakingTransactor) SetMinNumWatchtowers(opts *bind.TransactOpts, minimumNumWatchtowers *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetMinNumWatchtowers", minimumNumWatchtowers)
}

// SetMinNumWatchtowers is a paid mutator transaction binding the contract method 0xd80ff2b9.
//
// Solidity: function SetMinNumWatchtowers(uint256 minimumNumWatchtowers) returns(uint256)
func (_Staking *StakingSession) SetMinNumWatchtowers(minimumNumWatchtowers *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinNumWatchtowers(&_Staking.TransactOpts, minimumNumWatchtowers)
}

// SetMinNumWatchtowers is a paid mutator transaction binding the contract method 0xd80ff2b9.
//
// Solidity: function SetMinNumWatchtowers(uint256 minimumNumWatchtowers) returns(uint256)
func (_Staking *StakingTransactorSession) SetMinNumWatchtowers(minimumNumWatchtowers *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinNumWatchtowers(&_Staking.TransactOpts, minimumNumWatchtowers)
}

// SetSlashPercentage is a paid mutator transaction binding the contract method 0x42ca58d5.
//
// Solidity: function SetSlashPercentage(uint256 newPercentage) returns()
func (_Staking *StakingTransactor) SetSlashPercentage(opts *bind.TransactOpts, newPercentage *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetSlashPercentage", newPercentage)
}

// SetSlashPercentage is a paid mutator transaction binding the contract method 0x42ca58d5.
//
// Solidity: function SetSlashPercentage(uint256 newPercentage) returns()
func (_Staking *StakingSession) SetSlashPercentage(newPercentage *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetSlashPercentage(&_Staking.TransactOpts, newPercentage)
}

// SetSlashPercentage is a paid mutator transaction binding the contract method 0x42ca58d5.
//
// Solidity: function SetSlashPercentage(uint256 newPercentage) returns()
func (_Staking *StakingTransactorSession) SetSlashPercentage(newPercentage *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetSlashPercentage(&_Staking.TransactOpts, newPercentage)
}

// SetStakingMinThreshold is a paid mutator transaction binding the contract method 0x2c404e9c.
//
// Solidity: function SetStakingMinThreshold(uint256 newThreshold) returns()
func (_Staking *StakingTransactor) SetStakingMinThreshold(opts *bind.TransactOpts, newThreshold *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetStakingMinThreshold", newThreshold)
}

// SetStakingMinThreshold is a paid mutator transaction binding the contract method 0x2c404e9c.
//
// Solidity: function SetStakingMinThreshold(uint256 newThreshold) returns()
func (_Staking *StakingSession) SetStakingMinThreshold(newThreshold *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetStakingMinThreshold(&_Staking.TransactOpts, newThreshold)
}

// SetStakingMinThreshold is a paid mutator transaction binding the contract method 0x2c404e9c.
//
// Solidity: function SetStakingMinThreshold(uint256 newThreshold) returns()
func (_Staking *StakingTransactorSession) SetStakingMinThreshold(newThreshold *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetStakingMinThreshold(&_Staking.TransactOpts, newThreshold)
}

// Slash is a paid mutator transaction binding the contract method 0x02fb4d85.
//
// Solidity: function slash(address slashAddr, uint256 slashAmount) returns()
func (_Staking *StakingTransactor) Slash(opts *bind.TransactOpts, slashAddr common.Address, slashAmount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "slash", slashAddr, slashAmount)
}

// Slash is a paid mutator transaction binding the contract method 0x02fb4d85.
//
// Solidity: function slash(address slashAddr, uint256 slashAmount) returns()
func (_Staking *StakingSession) Slash(slashAddr common.Address, slashAmount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Slash(&_Staking.TransactOpts, slashAddr, slashAmount)
}

// Slash is a paid mutator transaction binding the contract method 0x02fb4d85.
//
// Solidity: function slash(address slashAddr, uint256 slashAmount) returns()
func (_Staking *StakingTransactorSession) Slash(slashAddr common.Address, slashAmount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Slash(&_Staking.TransactOpts, slashAddr, slashAmount)
}

// Stake is a paid mutator transaction binding the contract method 0x46f45b8d.
//
// Solidity: function stake(string nodeType) payable returns()
func (_Staking *StakingTransactor) Stake(opts *bind.TransactOpts, nodeType string) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "stake", nodeType)
}

// Stake is a paid mutator transaction binding the contract method 0x46f45b8d.
//
// Solidity: function stake(string nodeType) payable returns()
func (_Staking *StakingSession) Stake(nodeType string) (*types.Transaction, error) {
	return _Staking.Contract.Stake(&_Staking.TransactOpts, nodeType)
}

// Stake is a paid mutator transaction binding the contract method 0x46f45b8d.
//
// Solidity: function stake(string nodeType) payable returns()
func (_Staking *StakingTransactorSession) Stake(nodeType string) (*types.Transaction, error) {
	return _Staking.Contract.Stake(&_Staking.TransactOpts, nodeType)
}

// Unstake is a paid mutator transaction binding the contract method 0x2def6620.
//
// Solidity: function unstake() returns()
func (_Staking *StakingTransactor) Unstake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unstake")
}

// Unstake is a paid mutator transaction binding the contract method 0x2def6620.
//
// Solidity: function unstake() returns()
func (_Staking *StakingSession) Unstake() (*types.Transaction, error) {
	return _Staking.Contract.Unstake(&_Staking.TransactOpts)
}

// Unstake is a paid mutator transaction binding the contract method 0x2def6620.
//
// Solidity: function unstake() returns()
func (_Staking *StakingTransactorSession) Unstake() (*types.Transaction, error) {
	return _Staking.Contract.Unstake(&_Staking.TransactOpts)
}

// StakingDisputeResolutionBeganIterator is returned from FilterDisputeResolutionBegan and is used to iterate over the raw logs and unpacked data for DisputeResolutionBegan events raised by the Staking contract.
type StakingDisputeResolutionBeganIterator struct {
	Event *StakingDisputeResolutionBegan // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingDisputeResolutionBeganIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingDisputeResolutionBegan)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingDisputeResolutionBegan)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingDisputeResolutionBeganIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingDisputeResolutionBeganIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingDisputeResolutionBegan represents a DisputeResolutionBegan event raised by the Staking contract.
type StakingDisputeResolutionBegan struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDisputeResolutionBegan is a free log retrieval operation binding the contract event 0x14ebe573ff6e00d7293f5d831eb94cade703155cd0910eb5316a7b2f17b14c35.
//
// Solidity: event DisputeResolutionBegan(address indexed account)
func (_Staking *StakingFilterer) FilterDisputeResolutionBegan(opts *bind.FilterOpts, account []common.Address) (*StakingDisputeResolutionBeganIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "DisputeResolutionBegan", accountRule)
	if err != nil {
		return nil, err
	}
	return &StakingDisputeResolutionBeganIterator{contract: _Staking.contract, event: "DisputeResolutionBegan", logs: logs, sub: sub}, nil
}

// WatchDisputeResolutionBegan is a free log subscription operation binding the contract event 0x14ebe573ff6e00d7293f5d831eb94cade703155cd0910eb5316a7b2f17b14c35.
//
// Solidity: event DisputeResolutionBegan(address indexed account)
func (_Staking *StakingFilterer) WatchDisputeResolutionBegan(opts *bind.WatchOpts, sink chan<- *StakingDisputeResolutionBegan, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "DisputeResolutionBegan", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingDisputeResolutionBegan)
				if err := _Staking.contract.UnpackLog(event, "DisputeResolutionBegan", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisputeResolutionBegan is a log parse operation binding the contract event 0x14ebe573ff6e00d7293f5d831eb94cade703155cd0910eb5316a7b2f17b14c35.
//
// Solidity: event DisputeResolutionBegan(address indexed account)
func (_Staking *StakingFilterer) ParseDisputeResolutionBegan(log types.Log) (*StakingDisputeResolutionBegan, error) {
	event := new(StakingDisputeResolutionBegan)
	if err := _Staking.contract.UnpackLog(event, "DisputeResolutionBegan", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingDisputeResolutionEndedIterator is returned from FilterDisputeResolutionEnded and is used to iterate over the raw logs and unpacked data for DisputeResolutionEnded events raised by the Staking contract.
type StakingDisputeResolutionEndedIterator struct {
	Event *StakingDisputeResolutionEnded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingDisputeResolutionEndedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingDisputeResolutionEnded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingDisputeResolutionEnded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingDisputeResolutionEndedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingDisputeResolutionEndedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingDisputeResolutionEnded represents a DisputeResolutionEnded event raised by the Staking contract.
type StakingDisputeResolutionEnded struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDisputeResolutionEnded is a free log retrieval operation binding the contract event 0x7da9849dcad1bb34324464458a33a9d0820286dedf66ec9c6669e730118d1c06.
//
// Solidity: event DisputeResolutionEnded(address indexed account)
func (_Staking *StakingFilterer) FilterDisputeResolutionEnded(opts *bind.FilterOpts, account []common.Address) (*StakingDisputeResolutionEndedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "DisputeResolutionEnded", accountRule)
	if err != nil {
		return nil, err
	}
	return &StakingDisputeResolutionEndedIterator{contract: _Staking.contract, event: "DisputeResolutionEnded", logs: logs, sub: sub}, nil
}

// WatchDisputeResolutionEnded is a free log subscription operation binding the contract event 0x7da9849dcad1bb34324464458a33a9d0820286dedf66ec9c6669e730118d1c06.
//
// Solidity: event DisputeResolutionEnded(address indexed account)
func (_Staking *StakingFilterer) WatchDisputeResolutionEnded(opts *bind.WatchOpts, sink chan<- *StakingDisputeResolutionEnded, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "DisputeResolutionEnded", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingDisputeResolutionEnded)
				if err := _Staking.contract.UnpackLog(event, "DisputeResolutionEnded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisputeResolutionEnded is a log parse operation binding the contract event 0x7da9849dcad1bb34324464458a33a9d0820286dedf66ec9c6669e730118d1c06.
//
// Solidity: event DisputeResolutionEnded(address indexed account)
func (_Staking *StakingFilterer) ParseDisputeResolutionEnded(log types.Log) (*StakingDisputeResolutionEnded, error) {
	event := new(StakingDisputeResolutionEnded)
	if err := _Staking.contract.UnpackLog(event, "DisputeResolutionEnded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingSlashedIterator is returned from FilterSlashed and is used to iterate over the raw logs and unpacked data for Slashed events raised by the Staking contract.
type StakingSlashedIterator struct {
	Event *StakingSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingSlashed represents a Slashed event raised by the Staking contract.
type StakingSlashed struct {
	Account       common.Address
	NewAmount     *big.Int
	SlashedAmount *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSlashed is a free log retrieval operation binding the contract event 0x45a371af55b0726877a30f464edc14db5879ab096590bacce682cf6c18223596.
//
// Solidity: event Slashed(address indexed account, uint256 newAmount, uint256 slashedAmount)
func (_Staking *StakingFilterer) FilterSlashed(opts *bind.FilterOpts, account []common.Address) (*StakingSlashedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Slashed", accountRule)
	if err != nil {
		return nil, err
	}
	return &StakingSlashedIterator{contract: _Staking.contract, event: "Slashed", logs: logs, sub: sub}, nil
}

// WatchSlashed is a free log subscription operation binding the contract event 0x45a371af55b0726877a30f464edc14db5879ab096590bacce682cf6c18223596.
//
// Solidity: event Slashed(address indexed account, uint256 newAmount, uint256 slashedAmount)
func (_Staking *StakingFilterer) WatchSlashed(opts *bind.WatchOpts, sink chan<- *StakingSlashed, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Slashed", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingSlashed)
				if err := _Staking.contract.UnpackLog(event, "Slashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashed is a log parse operation binding the contract event 0x45a371af55b0726877a30f464edc14db5879ab096590bacce682cf6c18223596.
//
// Solidity: event Slashed(address indexed account, uint256 newAmount, uint256 slashedAmount)
func (_Staking *StakingFilterer) ParseSlashed(log types.Log) (*StakingSlashed, error) {
	event := new(StakingSlashed)
	if err := _Staking.contract.UnpackLog(event, "Slashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingStakedIterator is returned from FilterStaked and is used to iterate over the raw logs and unpacked data for Staked events raised by the Staking contract.
type StakingStakedIterator struct {
	Event *StakingStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingStaked represents a Staked event raised by the Staking contract.
type StakingStaked struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterStaked is a free log retrieval operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address indexed account, uint256 amount)
func (_Staking *StakingFilterer) FilterStaked(opts *bind.FilterOpts, account []common.Address) (*StakingStakedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Staked", accountRule)
	if err != nil {
		return nil, err
	}
	return &StakingStakedIterator{contract: _Staking.contract, event: "Staked", logs: logs, sub: sub}, nil
}

// WatchStaked is a free log subscription operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address indexed account, uint256 amount)
func (_Staking *StakingFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *StakingStaked, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Staked", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingStaked)
				if err := _Staking.contract.UnpackLog(event, "Staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaked is a log parse operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address indexed account, uint256 amount)
func (_Staking *StakingFilterer) ParseStaked(log types.Log) (*StakingStaked, error) {
	event := new(StakingStaked)
	if err := _Staking.contract.UnpackLog(event, "Staked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingUnstakedIterator is returned from FilterUnstaked and is used to iterate over the raw logs and unpacked data for Unstaked events raised by the Staking contract.
type StakingUnstakedIterator struct {
	Event *StakingUnstaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUnstakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUnstaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUnstaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUnstakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUnstakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUnstaked represents a Unstaked event raised by the Staking contract.
type StakingUnstaked struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnstaked is a free log retrieval operation binding the contract event 0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75.
//
// Solidity: event Unstaked(address indexed account, uint256 amount)
func (_Staking *StakingFilterer) FilterUnstaked(opts *bind.FilterOpts, account []common.Address) (*StakingUnstakedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Unstaked", accountRule)
	if err != nil {
		return nil, err
	}
	return &StakingUnstakedIterator{contract: _Staking.contract, event: "Unstaked", logs: logs, sub: sub}, nil
}

// WatchUnstaked is a free log subscription operation binding the contract event 0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75.
//
// Solidity: event Unstaked(address indexed account, uint256 amount)
func (_Staking *StakingFilterer) WatchUnstaked(opts *bind.WatchOpts, sink chan<- *StakingUnstaked, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Unstaked", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUnstaked)
				if err := _Staking.contract.UnpackLog(event, "Unstaked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnstaked is a log parse operation binding the contract event 0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75.
//
// Solidity: event Unstaked(address indexed account, uint256 amount)
func (_Staking *StakingFilterer) ParseUnstaked(log types.Log) (*StakingUnstaked, error) {
	event := new(StakingUnstaked)
	if err := _Staking.contract.UnpackLog(event, "Unstaked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
