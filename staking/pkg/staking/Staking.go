// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package staking

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StakingMetaData contains all meta data concerning the Staking contract.
var StakingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minNumParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNumParticipants\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DisputeResolutionBegan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DisputeResolutionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipientAddr\",\"type\":\"address\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AVAILABLE_NODE_TYPES\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sequencerAddr\",\"type\":\"address\"}],\"name\":\"BeginDisputeResolution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_MIN_SLASH_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_STAKING_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sequencerAddr\",\"type\":\"address\"}],\"name\":\"EndDisputeResolution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetAvailableNodeTypes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GetCurrentAccountStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetCurrentDisputeWatchtowers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetCurrentParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetCurrentSequencers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetCurrentSequencersInProbation\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetCurrentStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetCurrentStakingThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetCurrentWatchtowers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"watchtowerAddr\",\"type\":\"address\"}],\"name\":\"GetDisputedSequencerAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sequencerAddr\",\"type\":\"address\"}],\"name\":\"GetDisputedWatchtowerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMaxNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMaxNumSequencers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMaxNumWatchtowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMinNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMinNumSequencers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMinNumWatchtowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetSlashPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"IsSequencer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"IsWatchtower\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NODE_SEQUENCER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NODE_WATCHTOWER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maximumNumParticipants\",\"type\":\"uint256\"}],\"name\":\"SetMaxNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maximumNumSequencers\",\"type\":\"uint256\"}],\"name\":\"SetMaxNumSequencers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maximumNumWatchtowers\",\"type\":\"uint256\"}],\"name\":\"SetMaxNumWatchtowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumNumParticipants\",\"type\":\"uint256\"}],\"name\":\"SetMinNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumNumSequencers\",\"type\":\"uint256\"}],\"name\":\"SetMinNumSequencers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumNumWatchtowers\",\"type\":\"uint256\"}],\"name\":\"SetMinNumWatchtowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"SetSlashPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"SetStakingMinThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressDisputedSequencerToWatchtower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressDisputedSequencerToWatchtowerExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressDisputedWatchtowerToSequencer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressDisputedWatchtowerToSequencerExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToDisputedWatchtowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToIsDisputedWatchtower\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToIsParticipant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToIsSequencer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToIsSequencerInProbationAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToIsWatchtower\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToNodeType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToParticipantIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToSequencerInProbationIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToSequencerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToSequencerToDisputedWatchtower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressToWatchtowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dispute_watchtowers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maximumNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maximumNumSequencers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maximumNumWatchtowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minStakingThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minimumNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minimumNumSequencers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minimumNumWatchtowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_participants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_sequencers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_sequencers_in_probation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_slashPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_watchtowers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"slashAddr\",\"type\":\"address\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nodeType\",\"type\":\"string\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405260405180604001604052806040518060400160405280600981526020017f73657175656e636572000000000000000000000000000000000000000000000081525081526020016040518060400160405280600a81526020017f7761746368746f7765720000000000000000000000000000000000000000000081525081525060009060026200009592919062000125565b50348015620000a357600080fd5b5060405162005d6638038062005d668339818101604052810190620000c9919062000252565b808211156200010f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001069062000346565b60405180910390fd5b8160098190555080600a819055505050620006bf565b82805482825590600052602060002090810192821562000172579160200282015b8281111562000171578251829081620001609190620005d8565b509160200191906001019062000146565b5b50905062000181919062000185565b5090565b5b80821115620001a957600081816200019f9190620001ad565b5060010162000186565b5090565b508054620001bb90620003d1565b6000825580601f10620001cf5750620001f0565b601f016020900490600052602060002090810190620001ef9190620001f3565b5b50565b5b808211156200020e576000816000905550600101620001f4565b5090565b600080fd5b6000819050919050565b6200022c8162000217565b81146200023857600080fd5b50565b6000815190506200024c8162000221565b92915050565b600080604083850312156200026c576200026b62000212565b5b60006200027c858286016200023b565b92505060206200028f858286016200023b565b9150509250929050565b600082825260208201905092915050565b7f4d696e207061727469636970616e7473206e756d6265722063616e206e6f742060008201527f62652067726561746572207468616e206d6178206e756d206f6620706172746960208201527f636970616e747300000000000000000000000000000000000000000000000000604082015250565b60006200032e60478362000299565b91506200033b82620002aa565b606082019050919050565b6000602082019050818103600083015262000361816200031f565b9050919050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003ea57607f821691505b6020821081036200040057620003ff620003a2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200046a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200042b565b6200047686836200042b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620004b9620004b3620004ad8462000217565b6200048e565b62000217565b9050919050565b6000819050919050565b620004d58362000498565b620004ed620004e482620004c0565b84845462000438565b825550505050565b600090565b62000504620004f5565b62000511818484620004ca565b505050565b5b8181101562000539576200052d600082620004fa565b60018101905062000517565b5050565b601f8211156200058857620005528162000406565b6200055d846200041b565b810160208510156200056d578190505b620005856200057c856200041b565b83018262000516565b50505b505050565b600082821c905092915050565b6000620005ad600019846008026200058d565b1980831691505092915050565b6000620005c883836200059a565b9150826002028217905092915050565b620005e38262000368565b67ffffffffffffffff811115620005ff57620005fe62000373565b5b6200060b8254620003d1565b620006188282856200053d565b600060209050601f8311600181146200065057600084156200063b578287015190505b620006478582620005ba565b865550620006b7565b601f198416620006608662000406565b60005b828110156200068a5784890151825560018201915060208501945060208101905062000663565b86831015620006aa5784890151620006a6601f8916826200059a565b8355505b6001600288020188555050505b505050505050565b61569780620006cf6000396000f3fe6080604052600436106103fa5760003560e01c8063a0f14bff11610213578063c6199c1f11610123578063d80ff2b9116100ab578063ebe4ad6f1161007a578063ebe4ad6f146110c2578063f196f824146110eb578063f76a1ee014611128578063f9a43d4c14611153578063fa70f5e514611190576103fa565b8063d80ff2b914610fe0578063e028aadf1461101d578063e2b5769d1461105a578063e387a7ed14611097576103fa565b8063d1405517116100f2578063d140551714610ee5578063d147c38714610f10578063d3be81a814610f4d578063d551832f14610f78578063d79f10d214610fa3576103fa565b8063c6199c1f14610e29578063c70966fb14610e54578063c8fa5fe914610e91578063c96be4cb14610ebc576103fa565b8063b737cd9e116101a6578063be31929a11610175578063be31929a14610d2e578063bfc5aeee14610d6b578063c2ccacdf14610d96578063c402d43c14610dc1578063c48c5f3714610dec576103fa565b8063b737cd9e14610c5e578063b8889f0214610c89578063bb5a26ff14610cc6578063bd9ed0b314610d03576103fa565b8063b17ca89c116101e2578063b17ca89c14610b7c578063b1da3b1314610ba7578063b41327ff14610be4578063b61b127f14610c21576103fa565b8063a0f14bff14610aac578063a145012614610ae9578063aa90aa6614610b14578063aff1ea7614610b51576103fa565b806342ca58d51161030e578063760118b6116102a15780638d084148116102705780638d084148146109c357806390e7c862146109ee57806398abb25e14610a1957806399a7c7e414610a565780639f9f710114610a81576103fa565b8063760118b6146108f35780637b3392631461091e5780637dceceb81461095b578063855598b714610998576103fa565b80635804e51c116102dd5780635804e51c14610813578063584060bb146108505780636b2f76351461088d57806372c8af2d146108b6576103fa565b806342ca58d51461077857806346f45b8d146107a157806351184694146107bd57806357a87ffd146107e8576103fa565b80631f2743b6116103915780632c404e9c116103605780632c404e9c146106a55780632def6620146106ce5780633603da84146106e5578063409b9ece1461071057806340b007531461073b576103fa565b80631f2743b6146105c357806324208990146105ee57806325d9b8c01461062b5780632b3cfe0e14610668576103fa565b806319ae6764116103cd57806319ae6764146104cf5780631b27dbc31461050c5780631cb9bdca146105495780631efcf4d114610586576103fa565b8063068946e8146103ff5780630e533c8e1461042a5780630fb18ccc1461046757806319908df814610492575b600080fd5b34801561040b57600080fd5b506104146111cd565b60405161042191906143ad565b60405180910390f35b34801561043657600080fd5b50610451600480360381019061044c919061443a565b6111d3565b60405161045e91906143ad565b60405180910390f35b34801561047357600080fd5b5061047c6111eb565b60405161048991906143ad565b60405180910390f35b34801561049e57600080fd5b506104b960048036038101906104b49190614493565b6111f1565b6040516104c691906144cf565b60405180910390f35b3480156104db57600080fd5b506104f660048036038101906104f1919061443a565b611230565b604051610503919061457a565b60405180910390f35b34801561051857600080fd5b50610533600480360381019061052e9190614493565b6112d0565b60405161054091906144cf565b60405180910390f35b34801561055557600080fd5b50610570600480360381019061056b919061443a565b61130f565b60405161057d91906143ad565b60405180910390f35b34801561059257600080fd5b506105ad60048036038101906105a8919061443a565b611327565b6040516105ba91906145b7565b60405180910390f35b3480156105cf57600080fd5b506105d8611347565b6040516105e591906146de565b60405180910390f35b3480156105fa57600080fd5b506106156004803603810190610610919061443a565b611420565b60405161062291906144cf565b60405180910390f35b34801561063757600080fd5b50610652600480360381019061064d919061443a565b611489565b60405161065f91906143ad565b60405180910390f35b34801561067457600080fd5b5061068f600480360381019061068a919061443a565b6114a1565b60405161069c91906143ad565b60405180910390f35b3480156106b157600080fd5b506106cc60048036038101906106c79190614493565b6114b9565b005b3480156106da57600080fd5b506106e3611522565b005b3480156106f157600080fd5b506106fa61160d565b60405161070791906147be565b60405180910390f35b34801561071c57600080fd5b5061072561169b565b60405161073291906143ad565b60405180910390f35b34801561074757600080fd5b50610762600480360381019061075d919061443a565b6116aa565b60405161076f91906145b7565b60405180910390f35b34801561078457600080fd5b5061079f600480360381019061079a9190614493565b6116ca565b005b6107bb60048036038101906107b69190614915565b611733565b005b3480156107c957600080fd5b506107d261179e565b6040516107df91906143ad565b60405180910390f35b3480156107f457600080fd5b506107fd6117a3565b60405161080a91906143ad565b60405180910390f35b34801561081f57600080fd5b5061083a6004803603810190610835919061443a565b6117b2565b60405161084791906144cf565b60405180910390f35b34801561085c57600080fd5b5061087760048036038101906108729190614493565b6117e5565b60405161088491906144cf565b60405180910390f35b34801561089957600080fd5b506108b460048036038101906108af919061443a565b611824565b005b3480156108c257600080fd5b506108dd60048036038101906108d8919061443a565b6118d5565b6040516108ea91906145b7565b60405180910390f35b3480156108ff57600080fd5b506109086118f5565b60405161091591906143ad565b60405180910390f35b34801561092a57600080fd5b506109456004803603810190610940919061443a565b6118ff565b60405161095291906145b7565b60405180910390f35b34801561096757600080fd5b50610982600480360381019061097d919061443a565b61191f565b60405161098f91906143ad565b60405180910390f35b3480156109a457600080fd5b506109ad611937565b6040516109ba919061457a565b60405180910390f35b3480156109cf57600080fd5b506109d8611970565b6040516109e591906143ad565b60405180910390f35b3480156109fa57600080fd5b50610a03611976565b604051610a1091906143ad565b60405180910390f35b348015610a2557600080fd5b50610a406004803603810190610a3b9190614493565b61197c565b604051610a4d91906143ad565b60405180910390f35b348015610a6257600080fd5b50610a6b61198f565b604051610a7891906147be565b60405180910390f35b348015610a8d57600080fd5b50610a96611a1d565b604051610aa3919061457a565b60405180910390f35b348015610ab857600080fd5b50610ad36004803603810190610ace919061443a565b611a56565b604051610ae091906143ad565b60405180910390f35b348015610af557600080fd5b50610afe611a6e565b604051610b0b91906143ad565b60405180910390f35b348015610b2057600080fd5b50610b3b6004803603810190610b36919061443a565b611a74565b604051610b4891906144cf565b60405180910390f35b348015610b5d57600080fd5b50610b66611add565b604051610b7391906143ad565b60405180910390f35b348015610b8857600080fd5b50610b91611ae9565b604051610b9e91906143ad565b60405180910390f35b348015610bb357600080fd5b50610bce6004803603810190610bc9919061443a565b611af3565b604051610bdb91906144cf565b60405180910390f35b348015610bf057600080fd5b50610c0b6004803603810190610c069190614493565b611b26565b604051610c18919061457a565b60405180910390f35b348015610c2d57600080fd5b50610c486004803603810190610c439190614493565b611bd2565b604051610c5591906143ad565b60405180910390f35b348015610c6a57600080fd5b50610c73611be5565b604051610c8091906147be565b60405180910390f35b348015610c9557600080fd5b50610cb06004803603810190610cab919061443a565b611c73565b604051610cbd91906143ad565b60405180910390f35b348015610cd257600080fd5b50610ced6004803603810190610ce8919061443a565b611c8b565b604051610cfa91906145b7565b60405180910390f35b348015610d0f57600080fd5b50610d18611ce1565b604051610d2591906143ad565b60405180910390f35b348015610d3a57600080fd5b50610d556004803603810190610d50919061443a565b611ceb565b604051610d6291906145b7565b60405180910390f35b348015610d7757600080fd5b50610d80611d0b565b604051610d8d91906143ad565b60405180910390f35b348015610da257600080fd5b50610dab611d15565b604051610db891906143ad565b60405180910390f35b348015610dcd57600080fd5b50610dd6611d1f565b604051610de391906147be565b60405180910390f35b348015610df857600080fd5b50610e136004803603810190610e0e9190614493565b611dad565b604051610e2091906144cf565b60405180910390f35b348015610e3557600080fd5b50610e3e611dec565b604051610e4b91906143ad565b60405180910390f35b348015610e6057600080fd5b50610e7b6004803603810190610e76919061443a565b611df2565b604051610e8891906145b7565b60405180910390f35b348015610e9d57600080fd5b50610ea6611e12565b604051610eb391906143ad565b60405180910390f35b348015610ec857600080fd5b50610ee36004803603810190610ede919061443a565b611e1c565b005b348015610ef157600080fd5b50610efa611f58565b604051610f0791906147be565b60405180910390f35b348015610f1c57600080fd5b50610f376004803603810190610f329190614493565b611fe6565b604051610f4491906143ad565b60405180910390f35b348015610f5957600080fd5b50610f62611ff9565b604051610f6f91906143ad565b60405180910390f35b348015610f8457600080fd5b50610f8d612003565b604051610f9a91906143ad565b60405180910390f35b348015610faf57600080fd5b50610fca6004803603810190610fc5919061443a565b612009565b604051610fd791906143ad565b60405180910390f35b348015610fec57600080fd5b5061100760048036038101906110029190614493565b612052565b60405161101491906143ad565b60405180910390f35b34801561102957600080fd5b50611044600480360381019061103f9190614493565b612065565b60405161105191906143ad565b60405180910390f35b34801561106657600080fd5b50611081600480360381019061107c919061443a565b612078565b60405161108e91906145b7565b60405180910390f35b3480156110a357600080fd5b506110ac6120ce565b6040516110b991906143ad565b60405180910390f35b3480156110ce57600080fd5b506110e960048036038101906110e4919061443a565b6120d4565b005b3480156110f757600080fd5b50611112600480360381019061110d9190614493565b612123565b60405161111f91906144cf565b60405180910390f35b34801561113457600080fd5b5061113d612162565b60405161114a91906143ad565b60405180910390f35b34801561115f57600080fd5b5061117a60048036038101906111759190614493565b612168565b60405161118791906143ad565b60405180910390f35b34801561119c57600080fd5b506111b760048036038101906111b2919061443a565b61217b565b6040516111c491906145b7565b60405180910390f35b600a5481565b60146020528060005260406000206000915090505481565b600d5481565b600f818154811061120157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6007602052806000526040600020600091509050805461124f9061498d565b80601f016020809104026020016040519081016040528092919081815260200182805461127b9061498d565b80156112c85780601f1061129d576101008083540402835291602001916112c8565b820191906000526020600020905b8154815290600101906020018083116112ab57829003601f168201915b505050505081565b601881815481106112e057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60116020528060005260406000206000915090505481565b60136020528060005260406000206000915054906101000a900460ff1681565b60606000805480602002602001604051908101604052809291908181526020016000905b8282101561141757838290600052602060002001805461138a9061498d565b80601f01602080910402602001604051908101604052809291908181526020018280546113b69061498d565b80156114035780601f106113d857610100808354040283529160200191611403565b820191906000526020600020905b8154815290600101906020018083116113e657829003601f168201915b50505050508152602001906001019061136b565b50505050905090565b6000601e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b601a6020528060005260406000206000915090505481565b601b6020528060005260406000206000915090505481565b6114d83373ffffffffffffffffffffffffffffffffffffffff1661219b565b15611518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150f90614a0a565b60405180910390fd5b8060018190555050565b6115413373ffffffffffffffffffffffffffffffffffffffff1661219b565b15611581576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157890614a0a565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611603576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fa90614a76565b60405180910390fd5b61160b6121be565b565b6060601580548060200260200160405190810160405280929190818152602001828054801561169157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611647575b5050505050905090565b60006116a5612379565b905090565b60166020528060005260406000206000915054906101000a900460ff1681565b6116e93373ffffffffffffffffffffffffffffffffffffffff1661219b565b15611729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172090614a0a565b60405180910390fd5b8060028190555050565b6117523373ffffffffffffffffffffffffffffffffffffffff1661219b565b15611792576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178990614a0a565b60405180910390fd5b61179b8161239e565b50565b600181565b60006117ad6125d0565b905090565b601c6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601281815481106117f557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60011515611831336125ed565b151514611873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186a90614b08565b60405180910390fd5b61187c81612643565b6118853361274a565b61188f3382612851565b8073ffffffffffffffffffffffffffffffffffffffff167f14ebe573ff6e00d7293f5d831eb94cade703155cd0910eb5316a7b2f17b14c3560405160405180910390a250565b601f6020528060005260406000206000915054906101000a900460ff1681565b6000600b54905090565b60106020528060005260406000206000915054906101000a900460ff1681565b60056020528060005260406000206000915090505481565b6040518060400160405280600981526020017f73657175656e636572000000000000000000000000000000000000000000000081525081565b600b5481565b600e5481565b6000816009819055506009549050919050565b6060600f805480602002602001604051908101604052809291908181526020018280548015611a1357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116119c9575b5050505050905090565b6040518060400160405280600a81526020017f7761746368746f7765720000000000000000000000000000000000000000000081525081565b60176020528060005260406000206000915090505481565b60015481565b6000601c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b670de0b6b3a764000081565b6000600e54905090565b601e6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008181548110611b3657600080fd5b906000526020600020016000915090508054611b519061498d565b80601f0160208091040260200160405190810160405280929190818152602001828054611b7d9061498d565b8015611bca5780601f10611b9f57610100808354040283529160200191611bca565b820191906000526020600020905b815481529060010190602001808311611bad57829003601f168201915b505050505081565b600081600b81905550600b549050919050565b60606018805480602002602001604051908101604052809291908181526020018280548015611c6957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611c1f575b5050505050905090565b60066020528060005260406000206000915090505481565b6000601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600c54905090565b601d6020528060005260406000206000915054906101000a900460ff1681565b6000600954905090565b6000600d54905090565b60606012805480602002602001604051908101604052809291908181526020018280548015611da357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611d59575b5050505050905090565b60158181548110611dbd57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60046020528060005260406000206000915054906101000a900460ff1681565b6000600a54905090565b611e3b3373ffffffffffffffffffffffffffffffffffffffff1661219b565b15611e7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7290614a0a565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611efd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef490614a76565b60405180910390fd5b60011515611f0a33612a01565b151514611f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4390614b74565b60405180910390fd5b611f5581612a57565b50565b60606003805480602002602001604051908101604052809291908181526020018280548015611fdc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611f92575b5050505050905090565b600081600e81905550600e549050919050565b6000600854905090565b60025481565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600081600c81905550600c549050919050565b600081600a81905550600a549050919050565b6000601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60085481565b6120dd81612e25565b8073ffffffffffffffffffffffffffffffffffffffff167f7da9849dcad1bb34324464458a33a9d0820286dedf66ec9c6669e730118d1c0660405160405180910390a250565b6003818154811061213357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5481565b600081600d81905550600d549050919050565b60196020528060005260406000206000915054906101000a900460ff1681565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6121c733613123565b612206576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121fd90614c2c565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600860008282546122a19190614c7b565b925050819055506122b133613179565b6122ba33612a01565b156122c9576122c833613478565b5b6122d2336125ed565b156122e1576122e03361372e565b5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612327573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f758260405161236e91906143ad565b60405180910390a250565b600080600154111561238f57600154905061239b565b670de0b6b3a764000090505b90565b6123a7816139e4565b806123b757506123b681613a81565b5b6123f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ed90614d21565b60405180910390fd5b6123fe612379565b341015612440576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243790614dd9565b60405180910390fd5b61244a3382613b1e565b612489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248090614e6b565b60405180910390fd5b6124933382613b97565b6124d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c990614efd565b60405180910390fd5b34600860008282546124e49190614f1d565b9250508190555034600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461253a9190614f1d565b9250508190555061254a33613c10565b612553816139e4565b156125665761256133613d69565b61257f565b61256f81613a81565b1561257e5761257d33613e70565b5b5b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d346040516125c591906143ad565b60405180910390a250565b600080600254116125e457600190506125ea565b60025490505b90565b6000601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6001601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550601280549050601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506012819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6001601960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550601880549050601a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506018819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80601c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001601d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081601e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001601f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600060011515601f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503612b1857601e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050612bd4565b60011515601d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503612bd357601c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b5b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000612c37826064612c286125d0565b612c329190614f51565b613f77565b905060008183612c479190614c7b565b905080600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160086000828254612c9f9190614c7b565b925050819055508373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015612cec573d6000803e3d6000fd5b508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f10cc080888f97c96419786385100283aa8ae09efd09b75964b955212f42847d460085485604051612d4e929190614f93565b60405180910390a3612d5f85613fea565b15612dba57612d6d85612e25565b612d7684614040565b8473ffffffffffffffffffffffffffffffffffffffff167f7da9849dcad1bb34324464458a33a9d0820286dedf66ec9c6669e730118d1c0660405160405180910390a25b612dc38561433e565b15612e1e57612dd184612e25565b612dda85614040565b8473ffffffffffffffffffffffffffffffffffffffff167f7da9849dcad1bb34324464458a33a9d0820286dedf66ec9c6669e730118d1c0660405160405180910390a25b5050505050565b612e2e81613fea565b612e6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e6490615054565b60405180910390fd5b601280549050601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410612ef3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eea906150e6565b60405180910390fd5b6000601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006001601280549050612f4b9190614c7b565b905080821461303a57600060128281548110612f6a57612f69615106565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508060128481548110612fac57612fab615106565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060128054806130e9576130e8615135565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600954600380549050116131c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131b9906151fc565b60405180910390fd5b600380549050600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410613248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161323f9061528e565b60405180910390fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060016003805490506132a09190614c7b565b905080821461338f576000600382815481106132bf576132be615106565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806003848154811061330157613300615106565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600380548061343e5761343d615135565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b600f80549050601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106134fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134f590615320565b60405180910390fd5b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006001600f805490506135569190614c7b565b9050808214613645576000600f828154811061357557613574615106565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600f84815481106135b7576135b6615106565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600f8054806136f4576136f3615135565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b601580549050601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106137b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137ab906153b2565b60405180910390fd5b6000601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160158054905061380c9190614c7b565b90508082146138fb5760006015828154811061382b5761382a615106565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806015848154811061386d5761386c615106565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000601660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060158054806139aa576139a9615135565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b6000816040516020016139f7919061540e565b604051602081830303815290604052805190602001206040518060400160405280600981526020017f73657175656e6365720000000000000000000000000000000000000000000000815250604051602001613a53919061540e565b6040516020818303038152906040528051906020012003613a775760019050613a7c565b600090505b919050565b600081604051602001613a94919061540e565b604051602081830303815290604052805190602001206040518060400160405280600a81526020017f7761746368746f77657200000000000000000000000000000000000000000000815250604051602001613af0919061540e565b6040516020818303038152906040528051906020012003613b145760019050613b19565b600090505b919050565b6000613b29826139e4565b8015613b7e5750601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15613b8c5760009050613b91565b600190505b92915050565b6000613ba282613a81565b8015613bf75750601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15613c055760009050613c0a565b600190505b92915050565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16613d66576001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600380549050600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6001601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600f80549050601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600f819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6001601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550601580549050601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506015819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006127108284613f889190614f51565b1015613fc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613fc090615497565b60405180910390fd5b6127108284613fd89190614f51565b613fe291906154e6565b905092915050565b6000601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6140498161433e565b614088576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161407f906155af565b60405180910390fd5b601880549050601a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541061410e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161410590615641565b60405180910390fd5b6000601a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060016018805490506141669190614c7b565b90508082146142555760006018828154811061418557614184615106565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080601884815481106141c7576141c6615106565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000601960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000601a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601880548061430457614303615135565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b6000601960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000819050919050565b6143a781614394565b82525050565b60006020820190506143c2600083018461439e565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614407826143dc565b9050919050565b614417816143fc565b811461442257600080fd5b50565b6000813590506144348161440e565b92915050565b6000602082840312156144505761444f6143d2565b5b600061445e84828501614425565b91505092915050565b61447081614394565b811461447b57600080fd5b50565b60008135905061448d81614467565b92915050565b6000602082840312156144a9576144a86143d2565b5b60006144b78482850161447e565b91505092915050565b6144c9816143fc565b82525050565b60006020820190506144e460008301846144c0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015614524578082015181840152602081019050614509565b60008484015250505050565b6000601f19601f8301169050919050565b600061454c826144ea565b61455681856144f5565b9350614566818560208601614506565b61456f81614530565b840191505092915050565b600060208201905081810360008301526145948184614541565b905092915050565b60008115159050919050565b6145b18161459c565b82525050565b60006020820190506145cc60008301846145a8565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061461a826144ea565b61462481856145fe565b9350614634818560208601614506565b61463d81614530565b840191505092915050565b6000614654838361460f565b905092915050565b6000602082019050919050565b6000614674826145d2565b61467e81856145dd565b935083602082028501614690856145ee565b8060005b858110156146cc57848403895281516146ad8582614648565b94506146b88361465c565b925060208a01995050600181019050614694565b50829750879550505050505092915050565b600060208201905081810360008301526146f88184614669565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614735816143fc565b82525050565b6000614747838361472c565b60208301905092915050565b6000602082019050919050565b600061476b82614700565b614775818561470b565b93506147808361471c565b8060005b838110156147b1578151614798888261473b565b97506147a383614753565b925050600181019050614784565b5085935050505092915050565b600060208201905081810360008301526147d88184614760565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61482282614530565b810181811067ffffffffffffffff82111715614841576148406147ea565b5b80604052505050565b60006148546143c8565b90506148608282614819565b919050565b600067ffffffffffffffff8211156148805761487f6147ea565b5b61488982614530565b9050602081019050919050565b82818337600083830152505050565b60006148b86148b384614865565b61484a565b9050828152602081018484840111156148d4576148d36147e5565b5b6148df848285614896565b509392505050565b600082601f8301126148fc576148fb6147e0565b5b813561490c8482602086016148a5565b91505092915050565b60006020828403121561492b5761492a6143d2565b5b600082013567ffffffffffffffff811115614949576149486143d7565b5b614955848285016148e7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806149a557607f821691505b6020821081036149b8576149b761495e565b5b50919050565b7f4f6e6c7920454f412063616e2063616c6c2066756e6374696f6e000000000000600082015250565b60006149f4601a836144f5565b91506149ff826149be565b602082019050919050565b60006020820190508181036000830152614a23816149e7565b9050919050565b7f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000600082015250565b6000614a60601d836144f5565b9150614a6b82614a2a565b602082019050919050565b60006020820190508181036000830152614a8f81614a53565b9050919050565b7f4f6e6c79207761746368746f7765722063616e2063616c6c2066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000614af26021836144f5565b9150614afd82614a96565b604082019050919050565b60006020820190508181036000830152614b2181614ae5565b9050919050565b7f4f6e6c792073657175656e6365722063616e2063616c6c2066756e6374696f6e600082015250565b6000614b5e6020836144f5565b9150614b6982614b28565b602082019050919050565b60006020820190508181036000830152614b8d81614b51565b9050919050565b7f53656e6465722068617320746f2062652070617274206f66207374616b696e6760008201527f20706f6c6c20696e206f7264657220746f20756e7374616b652069747320736860208201527f6172652e20556e7374616b652072656a65637465642e00000000000000000000604082015250565b6000614c166056836144f5565b9150614c2182614b94565b606082019050919050565b60006020820190508181036000830152614c4581614c09565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614c8682614394565b9150614c9183614394565b9250828203905081811115614ca957614ca8614c4c565b5b92915050565b7f50726f7669646564206e6f646520747970652068617320746f206d617463682060008201527f617661696c61626c65206e6f6465207479706573000000000000000000000000602082015250565b6000614d0b6034836144f5565b9150614d1682614caf565b604082019050919050565b60006020820190508181036000830152614d3a81614cfe565b9050919050565b7f496e737566696369656e74207374616b696e6720616d6f756e742070726f766960008201527f6465642e2048617320746f206265206c6172676572207468616e207374616b6960208201527f6e67206d696e696d756d207468726573686f6c64000000000000000000000000604082015250565b6000614dc36054836144f5565b9150614dce82614d41565b606082019050919050565b60006020820190508181036000830152614df281614db6565b9050919050565b7f53656e64657220697320616c72656164792073657175656e6365722e2052656a60008201527f656374696e67207374616b6520726571756573742e0000000000000000000000602082015250565b6000614e556035836144f5565b9150614e6082614df9565b604082019050919050565b60006020820190508181036000830152614e8481614e48565b9050919050565b7f53656e64657220697320616c7265616479207761746368746f7765722e20526560008201527f6a656374696e67207374616b6520726571756573742e00000000000000000000602082015250565b6000614ee76036836144f5565b9150614ef282614e8b565b604082019050919050565b60006020820190508181036000830152614f1681614eda565b9050919050565b6000614f2882614394565b9150614f3383614394565b9250828201905080821115614f4b57614f4a614c4c565b5b92915050565b6000614f5c82614394565b9150614f6783614394565b9250828202614f7581614394565b91508282048414831517614f8c57614f8b614c4c565b5b5092915050565b6000604082019050614fa8600083018561439e565b614fb5602083018461439e565b9392505050565b7f416464726573732068617320746f20626520696e2070726f626174696f6e206960008201527f6e206f7264657220746f2064656c6574652069742066726f6d2074686520707260208201527f6f626174696f6e2073657175656e63657273206c6973742e0000000000000000604082015250565b600061503e6058836144f5565b915061504982614fbc565b606082019050919050565b6000602082019050818103600083015261506d81615031565b9050919050565b7f6d616c6963696f7573207061727469636970616e7420696e646578206f75742060008201527f6f662072616e676520696e206d617070696e6700000000000000000000000000602082015250565b60006150d06033836144f5565b91506150db82615074565b604082019050919050565b600060208201905081810360008301526150ff816150c3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f5374616b696e67207061727469636970616e74732063616e2774206265206c6560008201527f7373207468616e20746865206d696e696d756d2072657175697265642070617260208201527f7469636970616e74206e756d0000000000000000000000000000000000000000604082015250565b60006151e6604c836144f5565b91506151f182615164565b606082019050919050565b60006020820190508181036000830152615215816151d9565b9050919050565b7f7061727469636970616e7420696e646578206f7574206f662072616e6765206960008201527f6e206d617070696e670000000000000000000000000000000000000000000000602082015250565b60006152786029836144f5565b91506152838261521c565b604082019050919050565b600060208201905081810360008301526152a78161526b565b9050919050565b7f73657175656e63657220696e646578206f7574206f662072616e676520696e2060008201527f6d617070696e6700000000000000000000000000000000000000000000000000602082015250565b600061530a6027836144f5565b9150615315826152ae565b604082019050919050565b60006020820190508181036000830152615339816152fd565b9050919050565b7f7761746368746f77657220696e646578206f7574206f662072616e676520696e60008201527f206d617070696e67000000000000000000000000000000000000000000000000602082015250565b600061539c6028836144f5565b91506153a782615340565b604082019050919050565b600060208201905081810360008301526153cb8161538f565b9050919050565b600081905092915050565b60006153e8826144ea565b6153f281856153d2565b9350615402818560208601614506565b80840191505092915050565b600061541a82846153dd565b915081905092915050565b7f416d6f756e7420697320746f6f206c6f7720746f2063616c63756c617465206660008201527f6565000000000000000000000000000000000000000000000000000000000000602082015250565b60006154816022836144f5565b915061548c82615425565b604082019050919050565b600060208201905081810360008301526154b081615474565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006154f182614394565b91506154fc83614394565b92508261550c5761550b6154b7565b5b828204905092915050565b7f416464726573732068617320746f20626520696e20646973707574656420776160008201527f746368746f7765727320696e206f7264657220746f2064656c6574652069742060208201527f66726f6d20746865206c6973742e000000000000000000000000000000000000604082015250565b6000615599604e836144f5565b91506155a482615517565b606082019050919050565b600060208201905081810360008301526155c88161558c565b9050919050565b7f4469737075746564207761746368746f776572206164647265737320696e646560008201527f78206f7574206f662072616e676520696e206d617070696e6700000000000000602082015250565b600061562b6039836144f5565b9150615636826155cf565b604082019050919050565b6000602082019050818103600083015261565a8161561e565b905091905056fea26469706673582212206d4d67c6f55fb21b805a49d7b048201e844ac926bd2047ce60d9a75785f506eb64736f6c63430008130033",
}

// StakingABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingMetaData.ABI instead.
var StakingABI = StakingMetaData.ABI

// StakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingMetaData.Bin instead.
var StakingBin = StakingMetaData.Bin

// DeployStaking deploys a new Ethereum contract, binding an instance of Staking to it.
func DeployStaking(auth *bind.TransactOpts, backend bind.ContractBackend, minNumParticipants *big.Int, maxNumParticipants *big.Int) (common.Address, *types.Transaction, *Staking, error) {
	parsed, err := StakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingBin), backend, minNumParticipants, maxNumParticipants)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// Staking is an auto generated Go binding around an Ethereum contract.
type Staking struct {
	StakingCaller     // Read-only binding to the contract
	StakingTransactor // Write-only binding to the contract
	StakingFilterer   // Log filterer for contract events
}

// StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingSession struct {
	Contract     *Staking          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingCallerSession struct {
	Contract *StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingTransactorSession struct {
	Contract     *StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingRaw struct {
	Contract *Staking // Generic contract binding to access the raw methods on
}

// StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingCallerRaw struct {
	Contract *StakingCaller // Generic read-only contract binding to access the raw methods on
}

// StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingTransactorRaw struct {
	Contract *StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStaking creates a new instance of Staking, bound to a specific deployed contract.
func NewStaking(address common.Address, backend bind.ContractBackend) (*Staking, error) {
	contract, err := bindStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// NewStakingCaller creates a new read-only instance of Staking, bound to a specific deployed contract.
func NewStakingCaller(address common.Address, caller bind.ContractCaller) (*StakingCaller, error) {
	contract, err := bindStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingCaller{contract: contract}, nil
}

// NewStakingTransactor creates a new write-only instance of Staking, bound to a specific deployed contract.
func NewStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingTransactor, error) {
	contract, err := bindStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingTransactor{contract: contract}, nil
}

// NewStakingFilterer creates a new log filterer instance of Staking, bound to a specific deployed contract.
func NewStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingFilterer, error) {
	contract, err := bindStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingFilterer{contract: contract}, nil
}

// bindStaking binds a generic wrapper to an already deployed contract.
func bindStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transact(opts, method, params...)
}

// AVAILABLENODETYPES is a free data retrieval call binding the contract method 0xb41327ff.
//
// Solidity: function AVAILABLE_NODE_TYPES(uint256 ) view returns(string)
func (_Staking *StakingCaller) AVAILABLENODETYPES(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "AVAILABLE_NODE_TYPES", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AVAILABLENODETYPES is a free data retrieval call binding the contract method 0xb41327ff.
//
// Solidity: function AVAILABLE_NODE_TYPES(uint256 ) view returns(string)
func (_Staking *StakingSession) AVAILABLENODETYPES(arg0 *big.Int) (string, error) {
	return _Staking.Contract.AVAILABLENODETYPES(&_Staking.CallOpts, arg0)
}

// AVAILABLENODETYPES is a free data retrieval call binding the contract method 0xb41327ff.
//
// Solidity: function AVAILABLE_NODE_TYPES(uint256 ) view returns(string)
func (_Staking *StakingCallerSession) AVAILABLENODETYPES(arg0 *big.Int) (string, error) {
	return _Staking.Contract.AVAILABLENODETYPES(&_Staking.CallOpts, arg0)
}

// DEFAULTMINSLASHPERCENTAGE is a free data retrieval call binding the contract method 0x51184694.
//
// Solidity: function DEFAULT_MIN_SLASH_PERCENTAGE() view returns(uint256)
func (_Staking *StakingCaller) DEFAULTMINSLASHPERCENTAGE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "DEFAULT_MIN_SLASH_PERCENTAGE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DEFAULTMINSLASHPERCENTAGE is a free data retrieval call binding the contract method 0x51184694.
//
// Solidity: function DEFAULT_MIN_SLASH_PERCENTAGE() view returns(uint256)
func (_Staking *StakingSession) DEFAULTMINSLASHPERCENTAGE() (*big.Int, error) {
	return _Staking.Contract.DEFAULTMINSLASHPERCENTAGE(&_Staking.CallOpts)
}

// DEFAULTMINSLASHPERCENTAGE is a free data retrieval call binding the contract method 0x51184694.
//
// Solidity: function DEFAULT_MIN_SLASH_PERCENTAGE() view returns(uint256)
func (_Staking *StakingCallerSession) DEFAULTMINSLASHPERCENTAGE() (*big.Int, error) {
	return _Staking.Contract.DEFAULTMINSLASHPERCENTAGE(&_Staking.CallOpts)
}

// DEFAULTSTAKINGTHRESHOLD is a free data retrieval call binding the contract method 0xaff1ea76.
//
// Solidity: function DEFAULT_STAKING_THRESHOLD() view returns(uint256)
func (_Staking *StakingCaller) DEFAULTSTAKINGTHRESHOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "DEFAULT_STAKING_THRESHOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DEFAULTSTAKINGTHRESHOLD is a free data retrieval call binding the contract method 0xaff1ea76.
//
// Solidity: function DEFAULT_STAKING_THRESHOLD() view returns(uint256)
func (_Staking *StakingSession) DEFAULTSTAKINGTHRESHOLD() (*big.Int, error) {
	return _Staking.Contract.DEFAULTSTAKINGTHRESHOLD(&_Staking.CallOpts)
}

// DEFAULTSTAKINGTHRESHOLD is a free data retrieval call binding the contract method 0xaff1ea76.
//
// Solidity: function DEFAULT_STAKING_THRESHOLD() view returns(uint256)
func (_Staking *StakingCallerSession) DEFAULTSTAKINGTHRESHOLD() (*big.Int, error) {
	return _Staking.Contract.DEFAULTSTAKINGTHRESHOLD(&_Staking.CallOpts)
}

// GetAvailableNodeTypes is a free data retrieval call binding the contract method 0x1f2743b6.
//
// Solidity: function GetAvailableNodeTypes() view returns(string[])
func (_Staking *StakingCaller) GetAvailableNodeTypes(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetAvailableNodeTypes")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetAvailableNodeTypes is a free data retrieval call binding the contract method 0x1f2743b6.
//
// Solidity: function GetAvailableNodeTypes() view returns(string[])
func (_Staking *StakingSession) GetAvailableNodeTypes() ([]string, error) {
	return _Staking.Contract.GetAvailableNodeTypes(&_Staking.CallOpts)
}

// GetAvailableNodeTypes is a free data retrieval call binding the contract method 0x1f2743b6.
//
// Solidity: function GetAvailableNodeTypes() view returns(string[])
func (_Staking *StakingCallerSession) GetAvailableNodeTypes() ([]string, error) {
	return _Staking.Contract.GetAvailableNodeTypes(&_Staking.CallOpts)
}

// GetCurrentAccountStakedAmount is a free data retrieval call binding the contract method 0xd79f10d2.
//
// Solidity: function GetCurrentAccountStakedAmount(address addr) view returns(uint256)
func (_Staking *StakingCaller) GetCurrentAccountStakedAmount(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetCurrentAccountStakedAmount", addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentAccountStakedAmount is a free data retrieval call binding the contract method 0xd79f10d2.
//
// Solidity: function GetCurrentAccountStakedAmount(address addr) view returns(uint256)
func (_Staking *StakingSession) GetCurrentAccountStakedAmount(addr common.Address) (*big.Int, error) {
	return _Staking.Contract.GetCurrentAccountStakedAmount(&_Staking.CallOpts, addr)
}

// GetCurrentAccountStakedAmount is a free data retrieval call binding the contract method 0xd79f10d2.
//
// Solidity: function GetCurrentAccountStakedAmount(address addr) view returns(uint256)
func (_Staking *StakingCallerSession) GetCurrentAccountStakedAmount(addr common.Address) (*big.Int, error) {
	return _Staking.Contract.GetCurrentAccountStakedAmount(&_Staking.CallOpts, addr)
}

// GetCurrentDisputeWatchtowers is a free data retrieval call binding the contract method 0xb737cd9e.
//
// Solidity: function GetCurrentDisputeWatchtowers() view returns(address[])
func (_Staking *StakingCaller) GetCurrentDisputeWatchtowers(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetCurrentDisputeWatchtowers")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetCurrentDisputeWatchtowers is a free data retrieval call binding the contract method 0xb737cd9e.
//
// Solidity: function GetCurrentDisputeWatchtowers() view returns(address[])
func (_Staking *StakingSession) GetCurrentDisputeWatchtowers() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentDisputeWatchtowers(&_Staking.CallOpts)
}

// GetCurrentDisputeWatchtowers is a free data retrieval call binding the contract method 0xb737cd9e.
//
// Solidity: function GetCurrentDisputeWatchtowers() view returns(address[])
func (_Staking *StakingCallerSession) GetCurrentDisputeWatchtowers() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentDisputeWatchtowers(&_Staking.CallOpts)
}

// GetCurrentParticipants is a free data retrieval call binding the contract method 0xd1405517.
//
// Solidity: function GetCurrentParticipants() view returns(address[])
func (_Staking *StakingCaller) GetCurrentParticipants(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetCurrentParticipants")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetCurrentParticipants is a free data retrieval call binding the contract method 0xd1405517.
//
// Solidity: function GetCurrentParticipants() view returns(address[])
func (_Staking *StakingSession) GetCurrentParticipants() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentParticipants(&_Staking.CallOpts)
}

// GetCurrentParticipants is a free data retrieval call binding the contract method 0xd1405517.
//
// Solidity: function GetCurrentParticipants() view returns(address[])
func (_Staking *StakingCallerSession) GetCurrentParticipants() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentParticipants(&_Staking.CallOpts)
}

// GetCurrentSequencers is a free data retrieval call binding the contract method 0x99a7c7e4.
//
// Solidity: function GetCurrentSequencers() view returns(address[])
func (_Staking *StakingCaller) GetCurrentSequencers(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetCurrentSequencers")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetCurrentSequencers is a free data retrieval call binding the contract method 0x99a7c7e4.
//
// Solidity: function GetCurrentSequencers() view returns(address[])
func (_Staking *StakingSession) GetCurrentSequencers() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentSequencers(&_Staking.CallOpts)
}

// GetCurrentSequencers is a free data retrieval call binding the contract method 0x99a7c7e4.
//
// Solidity: function GetCurrentSequencers() view returns(address[])
func (_Staking *StakingCallerSession) GetCurrentSequencers() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentSequencers(&_Staking.CallOpts)
}

// GetCurrentSequencersInProbation is a free data retrieval call binding the contract method 0xc402d43c.
//
// Solidity: function GetCurrentSequencersInProbation() view returns(address[])
func (_Staking *StakingCaller) GetCurrentSequencersInProbation(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetCurrentSequencersInProbation")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetCurrentSequencersInProbation is a free data retrieval call binding the contract method 0xc402d43c.
//
// Solidity: function GetCurrentSequencersInProbation() view returns(address[])
func (_Staking *StakingSession) GetCurrentSequencersInProbation() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentSequencersInProbation(&_Staking.CallOpts)
}

// GetCurrentSequencersInProbation is a free data retrieval call binding the contract method 0xc402d43c.
//
// Solidity: function GetCurrentSequencersInProbation() view returns(address[])
func (_Staking *StakingCallerSession) GetCurrentSequencersInProbation() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentSequencersInProbation(&_Staking.CallOpts)
}

// GetCurrentStakedAmount is a free data retrieval call binding the contract method 0xd3be81a8.
//
// Solidity: function GetCurrentStakedAmount() view returns(uint256)
func (_Staking *StakingCaller) GetCurrentStakedAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetCurrentStakedAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentStakedAmount is a free data retrieval call binding the contract method 0xd3be81a8.
//
// Solidity: function GetCurrentStakedAmount() view returns(uint256)
func (_Staking *StakingSession) GetCurrentStakedAmount() (*big.Int, error) {
	return _Staking.Contract.GetCurrentStakedAmount(&_Staking.CallOpts)
}

// GetCurrentStakedAmount is a free data retrieval call binding the contract method 0xd3be81a8.
//
// Solidity: function GetCurrentStakedAmount() view returns(uint256)
func (_Staking *StakingCallerSession) GetCurrentStakedAmount() (*big.Int, error) {
	return _Staking.Contract.GetCurrentStakedAmount(&_Staking.CallOpts)
}

// GetCurrentStakingThreshold is a free data retrieval call binding the contract method 0x409b9ece.
//
// Solidity: function GetCurrentStakingThreshold() view returns(uint256)
func (_Staking *StakingCaller) GetCurrentStakingThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetCurrentStakingThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentStakingThreshold is a free data retrieval call binding the contract method 0x409b9ece.
//
// Solidity: function GetCurrentStakingThreshold() view returns(uint256)
func (_Staking *StakingSession) GetCurrentStakingThreshold() (*big.Int, error) {
	return _Staking.Contract.GetCurrentStakingThreshold(&_Staking.CallOpts)
}

// GetCurrentStakingThreshold is a free data retrieval call binding the contract method 0x409b9ece.
//
// Solidity: function GetCurrentStakingThreshold() view returns(uint256)
func (_Staking *StakingCallerSession) GetCurrentStakingThreshold() (*big.Int, error) {
	return _Staking.Contract.GetCurrentStakingThreshold(&_Staking.CallOpts)
}

// GetCurrentWatchtowers is a free data retrieval call binding the contract method 0x3603da84.
//
// Solidity: function GetCurrentWatchtowers() view returns(address[])
func (_Staking *StakingCaller) GetCurrentWatchtowers(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetCurrentWatchtowers")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetCurrentWatchtowers is a free data retrieval call binding the contract method 0x3603da84.
//
// Solidity: function GetCurrentWatchtowers() view returns(address[])
func (_Staking *StakingSession) GetCurrentWatchtowers() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentWatchtowers(&_Staking.CallOpts)
}

// GetCurrentWatchtowers is a free data retrieval call binding the contract method 0x3603da84.
//
// Solidity: function GetCurrentWatchtowers() view returns(address[])
func (_Staking *StakingCallerSession) GetCurrentWatchtowers() ([]common.Address, error) {
	return _Staking.Contract.GetCurrentWatchtowers(&_Staking.CallOpts)
}

// GetDisputedSequencerAddrs is a free data retrieval call binding the contract method 0xaa90aa66.
//
// Solidity: function GetDisputedSequencerAddrs(address watchtowerAddr) view returns(address)
func (_Staking *StakingCaller) GetDisputedSequencerAddrs(opts *bind.CallOpts, watchtowerAddr common.Address) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetDisputedSequencerAddrs", watchtowerAddr)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetDisputedSequencerAddrs is a free data retrieval call binding the contract method 0xaa90aa66.
//
// Solidity: function GetDisputedSequencerAddrs(address watchtowerAddr) view returns(address)
func (_Staking *StakingSession) GetDisputedSequencerAddrs(watchtowerAddr common.Address) (common.Address, error) {
	return _Staking.Contract.GetDisputedSequencerAddrs(&_Staking.CallOpts, watchtowerAddr)
}

// GetDisputedSequencerAddrs is a free data retrieval call binding the contract method 0xaa90aa66.
//
// Solidity: function GetDisputedSequencerAddrs(address watchtowerAddr) view returns(address)
func (_Staking *StakingCallerSession) GetDisputedSequencerAddrs(watchtowerAddr common.Address) (common.Address, error) {
	return _Staking.Contract.GetDisputedSequencerAddrs(&_Staking.CallOpts, watchtowerAddr)
}

// GetDisputedWatchtowerAddr is a free data retrieval call binding the contract method 0x24208990.
//
// Solidity: function GetDisputedWatchtowerAddr(address sequencerAddr) view returns(address)
func (_Staking *StakingCaller) GetDisputedWatchtowerAddr(opts *bind.CallOpts, sequencerAddr common.Address) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetDisputedWatchtowerAddr", sequencerAddr)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetDisputedWatchtowerAddr is a free data retrieval call binding the contract method 0x24208990.
//
// Solidity: function GetDisputedWatchtowerAddr(address sequencerAddr) view returns(address)
func (_Staking *StakingSession) GetDisputedWatchtowerAddr(sequencerAddr common.Address) (common.Address, error) {
	return _Staking.Contract.GetDisputedWatchtowerAddr(&_Staking.CallOpts, sequencerAddr)
}

// GetDisputedWatchtowerAddr is a free data retrieval call binding the contract method 0x24208990.
//
// Solidity: function GetDisputedWatchtowerAddr(address sequencerAddr) view returns(address)
func (_Staking *StakingCallerSession) GetDisputedWatchtowerAddr(sequencerAddr common.Address) (common.Address, error) {
	return _Staking.Contract.GetDisputedWatchtowerAddr(&_Staking.CallOpts, sequencerAddr)
}

// GetMaxNumParticipants is a free data retrieval call binding the contract method 0xc8fa5fe9.
//
// Solidity: function GetMaxNumParticipants() view returns(uint256)
func (_Staking *StakingCaller) GetMaxNumParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetMaxNumParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxNumParticipants is a free data retrieval call binding the contract method 0xc8fa5fe9.
//
// Solidity: function GetMaxNumParticipants() view returns(uint256)
func (_Staking *StakingSession) GetMaxNumParticipants() (*big.Int, error) {
	return _Staking.Contract.GetMaxNumParticipants(&_Staking.CallOpts)
}

// GetMaxNumParticipants is a free data retrieval call binding the contract method 0xc8fa5fe9.
//
// Solidity: function GetMaxNumParticipants() view returns(uint256)
func (_Staking *StakingCallerSession) GetMaxNumParticipants() (*big.Int, error) {
	return _Staking.Contract.GetMaxNumParticipants(&_Staking.CallOpts)
}

// GetMaxNumSequencers is a free data retrieval call binding the contract method 0xc2ccacdf.
//
// Solidity: function GetMaxNumSequencers() view returns(uint256)
func (_Staking *StakingCaller) GetMaxNumSequencers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetMaxNumSequencers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxNumSequencers is a free data retrieval call binding the contract method 0xc2ccacdf.
//
// Solidity: function GetMaxNumSequencers() view returns(uint256)
func (_Staking *StakingSession) GetMaxNumSequencers() (*big.Int, error) {
	return _Staking.Contract.GetMaxNumSequencers(&_Staking.CallOpts)
}

// GetMaxNumSequencers is a free data retrieval call binding the contract method 0xc2ccacdf.
//
// Solidity: function GetMaxNumSequencers() view returns(uint256)
func (_Staking *StakingCallerSession) GetMaxNumSequencers() (*big.Int, error) {
	return _Staking.Contract.GetMaxNumSequencers(&_Staking.CallOpts)
}

// GetMaxNumWatchtowers is a free data retrieval call binding the contract method 0xb17ca89c.
//
// Solidity: function GetMaxNumWatchtowers() view returns(uint256)
func (_Staking *StakingCaller) GetMaxNumWatchtowers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetMaxNumWatchtowers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxNumWatchtowers is a free data retrieval call binding the contract method 0xb17ca89c.
//
// Solidity: function GetMaxNumWatchtowers() view returns(uint256)
func (_Staking *StakingSession) GetMaxNumWatchtowers() (*big.Int, error) {
	return _Staking.Contract.GetMaxNumWatchtowers(&_Staking.CallOpts)
}

// GetMaxNumWatchtowers is a free data retrieval call binding the contract method 0xb17ca89c.
//
// Solidity: function GetMaxNumWatchtowers() view returns(uint256)
func (_Staking *StakingCallerSession) GetMaxNumWatchtowers() (*big.Int, error) {
	return _Staking.Contract.GetMaxNumWatchtowers(&_Staking.CallOpts)
}

// GetMinNumParticipants is a free data retrieval call binding the contract method 0xbfc5aeee.
//
// Solidity: function GetMinNumParticipants() view returns(uint256)
func (_Staking *StakingCaller) GetMinNumParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetMinNumParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinNumParticipants is a free data retrieval call binding the contract method 0xbfc5aeee.
//
// Solidity: function GetMinNumParticipants() view returns(uint256)
func (_Staking *StakingSession) GetMinNumParticipants() (*big.Int, error) {
	return _Staking.Contract.GetMinNumParticipants(&_Staking.CallOpts)
}

// GetMinNumParticipants is a free data retrieval call binding the contract method 0xbfc5aeee.
//
// Solidity: function GetMinNumParticipants() view returns(uint256)
func (_Staking *StakingCallerSession) GetMinNumParticipants() (*big.Int, error) {
	return _Staking.Contract.GetMinNumParticipants(&_Staking.CallOpts)
}

// GetMinNumSequencers is a free data retrieval call binding the contract method 0x760118b6.
//
// Solidity: function GetMinNumSequencers() view returns(uint256)
func (_Staking *StakingCaller) GetMinNumSequencers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetMinNumSequencers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinNumSequencers is a free data retrieval call binding the contract method 0x760118b6.
//
// Solidity: function GetMinNumSequencers() view returns(uint256)
func (_Staking *StakingSession) GetMinNumSequencers() (*big.Int, error) {
	return _Staking.Contract.GetMinNumSequencers(&_Staking.CallOpts)
}

// GetMinNumSequencers is a free data retrieval call binding the contract method 0x760118b6.
//
// Solidity: function GetMinNumSequencers() view returns(uint256)
func (_Staking *StakingCallerSession) GetMinNumSequencers() (*big.Int, error) {
	return _Staking.Contract.GetMinNumSequencers(&_Staking.CallOpts)
}

// GetMinNumWatchtowers is a free data retrieval call binding the contract method 0xbd9ed0b3.
//
// Solidity: function GetMinNumWatchtowers() view returns(uint256)
func (_Staking *StakingCaller) GetMinNumWatchtowers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetMinNumWatchtowers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinNumWatchtowers is a free data retrieval call binding the contract method 0xbd9ed0b3.
//
// Solidity: function GetMinNumWatchtowers() view returns(uint256)
func (_Staking *StakingSession) GetMinNumWatchtowers() (*big.Int, error) {
	return _Staking.Contract.GetMinNumWatchtowers(&_Staking.CallOpts)
}

// GetMinNumWatchtowers is a free data retrieval call binding the contract method 0xbd9ed0b3.
//
// Solidity: function GetMinNumWatchtowers() view returns(uint256)
func (_Staking *StakingCallerSession) GetMinNumWatchtowers() (*big.Int, error) {
	return _Staking.Contract.GetMinNumWatchtowers(&_Staking.CallOpts)
}

// GetSlashPercentage is a free data retrieval call binding the contract method 0x57a87ffd.
//
// Solidity: function GetSlashPercentage() view returns(uint256)
func (_Staking *StakingCaller) GetSlashPercentage(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "GetSlashPercentage")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSlashPercentage is a free data retrieval call binding the contract method 0x57a87ffd.
//
// Solidity: function GetSlashPercentage() view returns(uint256)
func (_Staking *StakingSession) GetSlashPercentage() (*big.Int, error) {
	return _Staking.Contract.GetSlashPercentage(&_Staking.CallOpts)
}

// GetSlashPercentage is a free data retrieval call binding the contract method 0x57a87ffd.
//
// Solidity: function GetSlashPercentage() view returns(uint256)
func (_Staking *StakingCallerSession) GetSlashPercentage() (*big.Int, error) {
	return _Staking.Contract.GetSlashPercentage(&_Staking.CallOpts)
}

// IsSequencer is a free data retrieval call binding the contract method 0xbb5a26ff.
//
// Solidity: function IsSequencer(address addr) view returns(bool)
func (_Staking *StakingCaller) IsSequencer(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "IsSequencer", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSequencer is a free data retrieval call binding the contract method 0xbb5a26ff.
//
// Solidity: function IsSequencer(address addr) view returns(bool)
func (_Staking *StakingSession) IsSequencer(addr common.Address) (bool, error) {
	return _Staking.Contract.IsSequencer(&_Staking.CallOpts, addr)
}

// IsSequencer is a free data retrieval call binding the contract method 0xbb5a26ff.
//
// Solidity: function IsSequencer(address addr) view returns(bool)
func (_Staking *StakingCallerSession) IsSequencer(addr common.Address) (bool, error) {
	return _Staking.Contract.IsSequencer(&_Staking.CallOpts, addr)
}

// IsWatchtower is a free data retrieval call binding the contract method 0xe2b5769d.
//
// Solidity: function IsWatchtower(address addr) view returns(bool)
func (_Staking *StakingCaller) IsWatchtower(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "IsWatchtower", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsWatchtower is a free data retrieval call binding the contract method 0xe2b5769d.
//
// Solidity: function IsWatchtower(address addr) view returns(bool)
func (_Staking *StakingSession) IsWatchtower(addr common.Address) (bool, error) {
	return _Staking.Contract.IsWatchtower(&_Staking.CallOpts, addr)
}

// IsWatchtower is a free data retrieval call binding the contract method 0xe2b5769d.
//
// Solidity: function IsWatchtower(address addr) view returns(bool)
func (_Staking *StakingCallerSession) IsWatchtower(addr common.Address) (bool, error) {
	return _Staking.Contract.IsWatchtower(&_Staking.CallOpts, addr)
}

// NODESEQUENCER is a free data retrieval call binding the contract method 0x855598b7.
//
// Solidity: function NODE_SEQUENCER() view returns(string)
func (_Staking *StakingCaller) NODESEQUENCER(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "NODE_SEQUENCER")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NODESEQUENCER is a free data retrieval call binding the contract method 0x855598b7.
//
// Solidity: function NODE_SEQUENCER() view returns(string)
func (_Staking *StakingSession) NODESEQUENCER() (string, error) {
	return _Staking.Contract.NODESEQUENCER(&_Staking.CallOpts)
}

// NODESEQUENCER is a free data retrieval call binding the contract method 0x855598b7.
//
// Solidity: function NODE_SEQUENCER() view returns(string)
func (_Staking *StakingCallerSession) NODESEQUENCER() (string, error) {
	return _Staking.Contract.NODESEQUENCER(&_Staking.CallOpts)
}

// NODEWATCHTOWER is a free data retrieval call binding the contract method 0x9f9f7101.
//
// Solidity: function NODE_WATCHTOWER() view returns(string)
func (_Staking *StakingCaller) NODEWATCHTOWER(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "NODE_WATCHTOWER")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NODEWATCHTOWER is a free data retrieval call binding the contract method 0x9f9f7101.
//
// Solidity: function NODE_WATCHTOWER() view returns(string)
func (_Staking *StakingSession) NODEWATCHTOWER() (string, error) {
	return _Staking.Contract.NODEWATCHTOWER(&_Staking.CallOpts)
}

// NODEWATCHTOWER is a free data retrieval call binding the contract method 0x9f9f7101.
//
// Solidity: function NODE_WATCHTOWER() view returns(string)
func (_Staking *StakingCallerSession) NODEWATCHTOWER() (string, error) {
	return _Staking.Contract.NODEWATCHTOWER(&_Staking.CallOpts)
}

// AddressDisputedSequencerToWatchtower is a free data retrieval call binding the contract method 0xb1da3b13.
//
// Solidity: function _addressDisputedSequencerToWatchtower(address ) view returns(address)
func (_Staking *StakingCaller) AddressDisputedSequencerToWatchtower(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressDisputedSequencerToWatchtower", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AddressDisputedSequencerToWatchtower is a free data retrieval call binding the contract method 0xb1da3b13.
//
// Solidity: function _addressDisputedSequencerToWatchtower(address ) view returns(address)
func (_Staking *StakingSession) AddressDisputedSequencerToWatchtower(arg0 common.Address) (common.Address, error) {
	return _Staking.Contract.AddressDisputedSequencerToWatchtower(&_Staking.CallOpts, arg0)
}

// AddressDisputedSequencerToWatchtower is a free data retrieval call binding the contract method 0xb1da3b13.
//
// Solidity: function _addressDisputedSequencerToWatchtower(address ) view returns(address)
func (_Staking *StakingCallerSession) AddressDisputedSequencerToWatchtower(arg0 common.Address) (common.Address, error) {
	return _Staking.Contract.AddressDisputedSequencerToWatchtower(&_Staking.CallOpts, arg0)
}

// AddressDisputedSequencerToWatchtowerExists is a free data retrieval call binding the contract method 0x72c8af2d.
//
// Solidity: function _addressDisputedSequencerToWatchtowerExists(address ) view returns(bool)
func (_Staking *StakingCaller) AddressDisputedSequencerToWatchtowerExists(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressDisputedSequencerToWatchtowerExists", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AddressDisputedSequencerToWatchtowerExists is a free data retrieval call binding the contract method 0x72c8af2d.
//
// Solidity: function _addressDisputedSequencerToWatchtowerExists(address ) view returns(bool)
func (_Staking *StakingSession) AddressDisputedSequencerToWatchtowerExists(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressDisputedSequencerToWatchtowerExists(&_Staking.CallOpts, arg0)
}

// AddressDisputedSequencerToWatchtowerExists is a free data retrieval call binding the contract method 0x72c8af2d.
//
// Solidity: function _addressDisputedSequencerToWatchtowerExists(address ) view returns(bool)
func (_Staking *StakingCallerSession) AddressDisputedSequencerToWatchtowerExists(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressDisputedSequencerToWatchtowerExists(&_Staking.CallOpts, arg0)
}

// AddressDisputedWatchtowerToSequencer is a free data retrieval call binding the contract method 0x5804e51c.
//
// Solidity: function _addressDisputedWatchtowerToSequencer(address ) view returns(address)
func (_Staking *StakingCaller) AddressDisputedWatchtowerToSequencer(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressDisputedWatchtowerToSequencer", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AddressDisputedWatchtowerToSequencer is a free data retrieval call binding the contract method 0x5804e51c.
//
// Solidity: function _addressDisputedWatchtowerToSequencer(address ) view returns(address)
func (_Staking *StakingSession) AddressDisputedWatchtowerToSequencer(arg0 common.Address) (common.Address, error) {
	return _Staking.Contract.AddressDisputedWatchtowerToSequencer(&_Staking.CallOpts, arg0)
}

// AddressDisputedWatchtowerToSequencer is a free data retrieval call binding the contract method 0x5804e51c.
//
// Solidity: function _addressDisputedWatchtowerToSequencer(address ) view returns(address)
func (_Staking *StakingCallerSession) AddressDisputedWatchtowerToSequencer(arg0 common.Address) (common.Address, error) {
	return _Staking.Contract.AddressDisputedWatchtowerToSequencer(&_Staking.CallOpts, arg0)
}

// AddressDisputedWatchtowerToSequencerExists is a free data retrieval call binding the contract method 0xbe31929a.
//
// Solidity: function _addressDisputedWatchtowerToSequencerExists(address ) view returns(bool)
func (_Staking *StakingCaller) AddressDisputedWatchtowerToSequencerExists(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressDisputedWatchtowerToSequencerExists", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AddressDisputedWatchtowerToSequencerExists is a free data retrieval call binding the contract method 0xbe31929a.
//
// Solidity: function _addressDisputedWatchtowerToSequencerExists(address ) view returns(bool)
func (_Staking *StakingSession) AddressDisputedWatchtowerToSequencerExists(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressDisputedWatchtowerToSequencerExists(&_Staking.CallOpts, arg0)
}

// AddressDisputedWatchtowerToSequencerExists is a free data retrieval call binding the contract method 0xbe31929a.
//
// Solidity: function _addressDisputedWatchtowerToSequencerExists(address ) view returns(bool)
func (_Staking *StakingCallerSession) AddressDisputedWatchtowerToSequencerExists(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressDisputedWatchtowerToSequencerExists(&_Staking.CallOpts, arg0)
}

// AddressToDisputedWatchtowerIndex is a free data retrieval call binding the contract method 0x25d9b8c0.
//
// Solidity: function _addressToDisputedWatchtowerIndex(address ) view returns(uint256)
func (_Staking *StakingCaller) AddressToDisputedWatchtowerIndex(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToDisputedWatchtowerIndex", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressToDisputedWatchtowerIndex is a free data retrieval call binding the contract method 0x25d9b8c0.
//
// Solidity: function _addressToDisputedWatchtowerIndex(address ) view returns(uint256)
func (_Staking *StakingSession) AddressToDisputedWatchtowerIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToDisputedWatchtowerIndex(&_Staking.CallOpts, arg0)
}

// AddressToDisputedWatchtowerIndex is a free data retrieval call binding the contract method 0x25d9b8c0.
//
// Solidity: function _addressToDisputedWatchtowerIndex(address ) view returns(uint256)
func (_Staking *StakingCallerSession) AddressToDisputedWatchtowerIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToDisputedWatchtowerIndex(&_Staking.CallOpts, arg0)
}

// AddressToIsDisputedWatchtower is a free data retrieval call binding the contract method 0xfa70f5e5.
//
// Solidity: function _addressToIsDisputedWatchtower(address ) view returns(bool)
func (_Staking *StakingCaller) AddressToIsDisputedWatchtower(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToIsDisputedWatchtower", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AddressToIsDisputedWatchtower is a free data retrieval call binding the contract method 0xfa70f5e5.
//
// Solidity: function _addressToIsDisputedWatchtower(address ) view returns(bool)
func (_Staking *StakingSession) AddressToIsDisputedWatchtower(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsDisputedWatchtower(&_Staking.CallOpts, arg0)
}

// AddressToIsDisputedWatchtower is a free data retrieval call binding the contract method 0xfa70f5e5.
//
// Solidity: function _addressToIsDisputedWatchtower(address ) view returns(bool)
func (_Staking *StakingCallerSession) AddressToIsDisputedWatchtower(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsDisputedWatchtower(&_Staking.CallOpts, arg0)
}

// AddressToIsParticipant is a free data retrieval call binding the contract method 0xc70966fb.
//
// Solidity: function _addressToIsParticipant(address ) view returns(bool)
func (_Staking *StakingCaller) AddressToIsParticipant(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToIsParticipant", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AddressToIsParticipant is a free data retrieval call binding the contract method 0xc70966fb.
//
// Solidity: function _addressToIsParticipant(address ) view returns(bool)
func (_Staking *StakingSession) AddressToIsParticipant(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsParticipant(&_Staking.CallOpts, arg0)
}

// AddressToIsParticipant is a free data retrieval call binding the contract method 0xc70966fb.
//
// Solidity: function _addressToIsParticipant(address ) view returns(bool)
func (_Staking *StakingCallerSession) AddressToIsParticipant(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsParticipant(&_Staking.CallOpts, arg0)
}

// AddressToIsSequencer is a free data retrieval call binding the contract method 0x7b339263.
//
// Solidity: function _addressToIsSequencer(address ) view returns(bool)
func (_Staking *StakingCaller) AddressToIsSequencer(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToIsSequencer", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AddressToIsSequencer is a free data retrieval call binding the contract method 0x7b339263.
//
// Solidity: function _addressToIsSequencer(address ) view returns(bool)
func (_Staking *StakingSession) AddressToIsSequencer(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsSequencer(&_Staking.CallOpts, arg0)
}

// AddressToIsSequencer is a free data retrieval call binding the contract method 0x7b339263.
//
// Solidity: function _addressToIsSequencer(address ) view returns(bool)
func (_Staking *StakingCallerSession) AddressToIsSequencer(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsSequencer(&_Staking.CallOpts, arg0)
}

// AddressToIsSequencerInProbationAddr is a free data retrieval call binding the contract method 0x1efcf4d1.
//
// Solidity: function _addressToIsSequencerInProbationAddr(address ) view returns(bool)
func (_Staking *StakingCaller) AddressToIsSequencerInProbationAddr(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToIsSequencerInProbationAddr", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AddressToIsSequencerInProbationAddr is a free data retrieval call binding the contract method 0x1efcf4d1.
//
// Solidity: function _addressToIsSequencerInProbationAddr(address ) view returns(bool)
func (_Staking *StakingSession) AddressToIsSequencerInProbationAddr(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsSequencerInProbationAddr(&_Staking.CallOpts, arg0)
}

// AddressToIsSequencerInProbationAddr is a free data retrieval call binding the contract method 0x1efcf4d1.
//
// Solidity: function _addressToIsSequencerInProbationAddr(address ) view returns(bool)
func (_Staking *StakingCallerSession) AddressToIsSequencerInProbationAddr(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsSequencerInProbationAddr(&_Staking.CallOpts, arg0)
}

// AddressToIsWatchtower is a free data retrieval call binding the contract method 0x40b00753.
//
// Solidity: function _addressToIsWatchtower(address ) view returns(bool)
func (_Staking *StakingCaller) AddressToIsWatchtower(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToIsWatchtower", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AddressToIsWatchtower is a free data retrieval call binding the contract method 0x40b00753.
//
// Solidity: function _addressToIsWatchtower(address ) view returns(bool)
func (_Staking *StakingSession) AddressToIsWatchtower(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsWatchtower(&_Staking.CallOpts, arg0)
}

// AddressToIsWatchtower is a free data retrieval call binding the contract method 0x40b00753.
//
// Solidity: function _addressToIsWatchtower(address ) view returns(bool)
func (_Staking *StakingCallerSession) AddressToIsWatchtower(arg0 common.Address) (bool, error) {
	return _Staking.Contract.AddressToIsWatchtower(&_Staking.CallOpts, arg0)
}

// AddressToNodeType is a free data retrieval call binding the contract method 0x19ae6764.
//
// Solidity: function _addressToNodeType(address ) view returns(string)
func (_Staking *StakingCaller) AddressToNodeType(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToNodeType", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AddressToNodeType is a free data retrieval call binding the contract method 0x19ae6764.
//
// Solidity: function _addressToNodeType(address ) view returns(string)
func (_Staking *StakingSession) AddressToNodeType(arg0 common.Address) (string, error) {
	return _Staking.Contract.AddressToNodeType(&_Staking.CallOpts, arg0)
}

// AddressToNodeType is a free data retrieval call binding the contract method 0x19ae6764.
//
// Solidity: function _addressToNodeType(address ) view returns(string)
func (_Staking *StakingCallerSession) AddressToNodeType(arg0 common.Address) (string, error) {
	return _Staking.Contract.AddressToNodeType(&_Staking.CallOpts, arg0)
}

// AddressToParticipantIndex is a free data retrieval call binding the contract method 0xb8889f02.
//
// Solidity: function _addressToParticipantIndex(address ) view returns(uint256)
func (_Staking *StakingCaller) AddressToParticipantIndex(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToParticipantIndex", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressToParticipantIndex is a free data retrieval call binding the contract method 0xb8889f02.
//
// Solidity: function _addressToParticipantIndex(address ) view returns(uint256)
func (_Staking *StakingSession) AddressToParticipantIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToParticipantIndex(&_Staking.CallOpts, arg0)
}

// AddressToParticipantIndex is a free data retrieval call binding the contract method 0xb8889f02.
//
// Solidity: function _addressToParticipantIndex(address ) view returns(uint256)
func (_Staking *StakingCallerSession) AddressToParticipantIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToParticipantIndex(&_Staking.CallOpts, arg0)
}

// AddressToSequencerInProbationIndex is a free data retrieval call binding the contract method 0x0e533c8e.
//
// Solidity: function _addressToSequencerInProbationIndex(address ) view returns(uint256)
func (_Staking *StakingCaller) AddressToSequencerInProbationIndex(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToSequencerInProbationIndex", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressToSequencerInProbationIndex is a free data retrieval call binding the contract method 0x0e533c8e.
//
// Solidity: function _addressToSequencerInProbationIndex(address ) view returns(uint256)
func (_Staking *StakingSession) AddressToSequencerInProbationIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToSequencerInProbationIndex(&_Staking.CallOpts, arg0)
}

// AddressToSequencerInProbationIndex is a free data retrieval call binding the contract method 0x0e533c8e.
//
// Solidity: function _addressToSequencerInProbationIndex(address ) view returns(uint256)
func (_Staking *StakingCallerSession) AddressToSequencerInProbationIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToSequencerInProbationIndex(&_Staking.CallOpts, arg0)
}

// AddressToSequencerIndex is a free data retrieval call binding the contract method 0x1cb9bdca.
//
// Solidity: function _addressToSequencerIndex(address ) view returns(uint256)
func (_Staking *StakingCaller) AddressToSequencerIndex(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToSequencerIndex", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressToSequencerIndex is a free data retrieval call binding the contract method 0x1cb9bdca.
//
// Solidity: function _addressToSequencerIndex(address ) view returns(uint256)
func (_Staking *StakingSession) AddressToSequencerIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToSequencerIndex(&_Staking.CallOpts, arg0)
}

// AddressToSequencerIndex is a free data retrieval call binding the contract method 0x1cb9bdca.
//
// Solidity: function _addressToSequencerIndex(address ) view returns(uint256)
func (_Staking *StakingCallerSession) AddressToSequencerIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToSequencerIndex(&_Staking.CallOpts, arg0)
}

// AddressToSequencerToDisputedWatchtower is a free data retrieval call binding the contract method 0x2b3cfe0e.
//
// Solidity: function _addressToSequencerToDisputedWatchtower(address ) view returns(uint256)
func (_Staking *StakingCaller) AddressToSequencerToDisputedWatchtower(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToSequencerToDisputedWatchtower", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressToSequencerToDisputedWatchtower is a free data retrieval call binding the contract method 0x2b3cfe0e.
//
// Solidity: function _addressToSequencerToDisputedWatchtower(address ) view returns(uint256)
func (_Staking *StakingSession) AddressToSequencerToDisputedWatchtower(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToSequencerToDisputedWatchtower(&_Staking.CallOpts, arg0)
}

// AddressToSequencerToDisputedWatchtower is a free data retrieval call binding the contract method 0x2b3cfe0e.
//
// Solidity: function _addressToSequencerToDisputedWatchtower(address ) view returns(uint256)
func (_Staking *StakingCallerSession) AddressToSequencerToDisputedWatchtower(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToSequencerToDisputedWatchtower(&_Staking.CallOpts, arg0)
}

// AddressToStakedAmount is a free data retrieval call binding the contract method 0x7dceceb8.
//
// Solidity: function _addressToStakedAmount(address ) view returns(uint256)
func (_Staking *StakingCaller) AddressToStakedAmount(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToStakedAmount", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressToStakedAmount is a free data retrieval call binding the contract method 0x7dceceb8.
//
// Solidity: function _addressToStakedAmount(address ) view returns(uint256)
func (_Staking *StakingSession) AddressToStakedAmount(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToStakedAmount(&_Staking.CallOpts, arg0)
}

// AddressToStakedAmount is a free data retrieval call binding the contract method 0x7dceceb8.
//
// Solidity: function _addressToStakedAmount(address ) view returns(uint256)
func (_Staking *StakingCallerSession) AddressToStakedAmount(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToStakedAmount(&_Staking.CallOpts, arg0)
}

// AddressToWatchtowerIndex is a free data retrieval call binding the contract method 0xa0f14bff.
//
// Solidity: function _addressToWatchtowerIndex(address ) view returns(uint256)
func (_Staking *StakingCaller) AddressToWatchtowerIndex(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_addressToWatchtowerIndex", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressToWatchtowerIndex is a free data retrieval call binding the contract method 0xa0f14bff.
//
// Solidity: function _addressToWatchtowerIndex(address ) view returns(uint256)
func (_Staking *StakingSession) AddressToWatchtowerIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToWatchtowerIndex(&_Staking.CallOpts, arg0)
}

// AddressToWatchtowerIndex is a free data retrieval call binding the contract method 0xa0f14bff.
//
// Solidity: function _addressToWatchtowerIndex(address ) view returns(uint256)
func (_Staking *StakingCallerSession) AddressToWatchtowerIndex(arg0 common.Address) (*big.Int, error) {
	return _Staking.Contract.AddressToWatchtowerIndex(&_Staking.CallOpts, arg0)
}

// DisputeWatchtowers is a free data retrieval call binding the contract method 0x1b27dbc3.
//
// Solidity: function _dispute_watchtowers(uint256 ) view returns(address)
func (_Staking *StakingCaller) DisputeWatchtowers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_dispute_watchtowers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DisputeWatchtowers is a free data retrieval call binding the contract method 0x1b27dbc3.
//
// Solidity: function _dispute_watchtowers(uint256 ) view returns(address)
func (_Staking *StakingSession) DisputeWatchtowers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.DisputeWatchtowers(&_Staking.CallOpts, arg0)
}

// DisputeWatchtowers is a free data retrieval call binding the contract method 0x1b27dbc3.
//
// Solidity: function _dispute_watchtowers(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) DisputeWatchtowers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.DisputeWatchtowers(&_Staking.CallOpts, arg0)
}

// MaximumNumParticipants is a free data retrieval call binding the contract method 0x068946e8.
//
// Solidity: function _maximumNumParticipants() view returns(uint256)
func (_Staking *StakingCaller) MaximumNumParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_maximumNumParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaximumNumParticipants is a free data retrieval call binding the contract method 0x068946e8.
//
// Solidity: function _maximumNumParticipants() view returns(uint256)
func (_Staking *StakingSession) MaximumNumParticipants() (*big.Int, error) {
	return _Staking.Contract.MaximumNumParticipants(&_Staking.CallOpts)
}

// MaximumNumParticipants is a free data retrieval call binding the contract method 0x068946e8.
//
// Solidity: function _maximumNumParticipants() view returns(uint256)
func (_Staking *StakingCallerSession) MaximumNumParticipants() (*big.Int, error) {
	return _Staking.Contract.MaximumNumParticipants(&_Staking.CallOpts)
}

// MaximumNumSequencers is a free data retrieval call binding the contract method 0x0fb18ccc.
//
// Solidity: function _maximumNumSequencers() view returns(uint256)
func (_Staking *StakingCaller) MaximumNumSequencers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_maximumNumSequencers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaximumNumSequencers is a free data retrieval call binding the contract method 0x0fb18ccc.
//
// Solidity: function _maximumNumSequencers() view returns(uint256)
func (_Staking *StakingSession) MaximumNumSequencers() (*big.Int, error) {
	return _Staking.Contract.MaximumNumSequencers(&_Staking.CallOpts)
}

// MaximumNumSequencers is a free data retrieval call binding the contract method 0x0fb18ccc.
//
// Solidity: function _maximumNumSequencers() view returns(uint256)
func (_Staking *StakingCallerSession) MaximumNumSequencers() (*big.Int, error) {
	return _Staking.Contract.MaximumNumSequencers(&_Staking.CallOpts)
}

// MaximumNumWatchtowers is a free data retrieval call binding the contract method 0x90e7c862.
//
// Solidity: function _maximumNumWatchtowers() view returns(uint256)
func (_Staking *StakingCaller) MaximumNumWatchtowers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_maximumNumWatchtowers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaximumNumWatchtowers is a free data retrieval call binding the contract method 0x90e7c862.
//
// Solidity: function _maximumNumWatchtowers() view returns(uint256)
func (_Staking *StakingSession) MaximumNumWatchtowers() (*big.Int, error) {
	return _Staking.Contract.MaximumNumWatchtowers(&_Staking.CallOpts)
}

// MaximumNumWatchtowers is a free data retrieval call binding the contract method 0x90e7c862.
//
// Solidity: function _maximumNumWatchtowers() view returns(uint256)
func (_Staking *StakingCallerSession) MaximumNumWatchtowers() (*big.Int, error) {
	return _Staking.Contract.MaximumNumWatchtowers(&_Staking.CallOpts)
}

// MinStakingThreshold is a free data retrieval call binding the contract method 0xa1450126.
//
// Solidity: function _minStakingThreshold() view returns(uint256)
func (_Staking *StakingCaller) MinStakingThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_minStakingThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinStakingThreshold is a free data retrieval call binding the contract method 0xa1450126.
//
// Solidity: function _minStakingThreshold() view returns(uint256)
func (_Staking *StakingSession) MinStakingThreshold() (*big.Int, error) {
	return _Staking.Contract.MinStakingThreshold(&_Staking.CallOpts)
}

// MinStakingThreshold is a free data retrieval call binding the contract method 0xa1450126.
//
// Solidity: function _minStakingThreshold() view returns(uint256)
func (_Staking *StakingCallerSession) MinStakingThreshold() (*big.Int, error) {
	return _Staking.Contract.MinStakingThreshold(&_Staking.CallOpts)
}

// MinimumNumParticipants is a free data retrieval call binding the contract method 0xc6199c1f.
//
// Solidity: function _minimumNumParticipants() view returns(uint256)
func (_Staking *StakingCaller) MinimumNumParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_minimumNumParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumNumParticipants is a free data retrieval call binding the contract method 0xc6199c1f.
//
// Solidity: function _minimumNumParticipants() view returns(uint256)
func (_Staking *StakingSession) MinimumNumParticipants() (*big.Int, error) {
	return _Staking.Contract.MinimumNumParticipants(&_Staking.CallOpts)
}

// MinimumNumParticipants is a free data retrieval call binding the contract method 0xc6199c1f.
//
// Solidity: function _minimumNumParticipants() view returns(uint256)
func (_Staking *StakingCallerSession) MinimumNumParticipants() (*big.Int, error) {
	return _Staking.Contract.MinimumNumParticipants(&_Staking.CallOpts)
}

// MinimumNumSequencers is a free data retrieval call binding the contract method 0x8d084148.
//
// Solidity: function _minimumNumSequencers() view returns(uint256)
func (_Staking *StakingCaller) MinimumNumSequencers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_minimumNumSequencers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumNumSequencers is a free data retrieval call binding the contract method 0x8d084148.
//
// Solidity: function _minimumNumSequencers() view returns(uint256)
func (_Staking *StakingSession) MinimumNumSequencers() (*big.Int, error) {
	return _Staking.Contract.MinimumNumSequencers(&_Staking.CallOpts)
}

// MinimumNumSequencers is a free data retrieval call binding the contract method 0x8d084148.
//
// Solidity: function _minimumNumSequencers() view returns(uint256)
func (_Staking *StakingCallerSession) MinimumNumSequencers() (*big.Int, error) {
	return _Staking.Contract.MinimumNumSequencers(&_Staking.CallOpts)
}

// MinimumNumWatchtowers is a free data retrieval call binding the contract method 0xf76a1ee0.
//
// Solidity: function _minimumNumWatchtowers() view returns(uint256)
func (_Staking *StakingCaller) MinimumNumWatchtowers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_minimumNumWatchtowers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumNumWatchtowers is a free data retrieval call binding the contract method 0xf76a1ee0.
//
// Solidity: function _minimumNumWatchtowers() view returns(uint256)
func (_Staking *StakingSession) MinimumNumWatchtowers() (*big.Int, error) {
	return _Staking.Contract.MinimumNumWatchtowers(&_Staking.CallOpts)
}

// MinimumNumWatchtowers is a free data retrieval call binding the contract method 0xf76a1ee0.
//
// Solidity: function _minimumNumWatchtowers() view returns(uint256)
func (_Staking *StakingCallerSession) MinimumNumWatchtowers() (*big.Int, error) {
	return _Staking.Contract.MinimumNumWatchtowers(&_Staking.CallOpts)
}

// Participants is a free data retrieval call binding the contract method 0xf196f824.
//
// Solidity: function _participants(uint256 ) view returns(address)
func (_Staking *StakingCaller) Participants(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_participants", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Participants is a free data retrieval call binding the contract method 0xf196f824.
//
// Solidity: function _participants(uint256 ) view returns(address)
func (_Staking *StakingSession) Participants(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Participants(&_Staking.CallOpts, arg0)
}

// Participants is a free data retrieval call binding the contract method 0xf196f824.
//
// Solidity: function _participants(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) Participants(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Participants(&_Staking.CallOpts, arg0)
}

// Sequencers is a free data retrieval call binding the contract method 0x19908df8.
//
// Solidity: function _sequencers(uint256 ) view returns(address)
func (_Staking *StakingCaller) Sequencers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_sequencers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Sequencers is a free data retrieval call binding the contract method 0x19908df8.
//
// Solidity: function _sequencers(uint256 ) view returns(address)
func (_Staking *StakingSession) Sequencers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Sequencers(&_Staking.CallOpts, arg0)
}

// Sequencers is a free data retrieval call binding the contract method 0x19908df8.
//
// Solidity: function _sequencers(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) Sequencers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Sequencers(&_Staking.CallOpts, arg0)
}

// SequencersInProbation is a free data retrieval call binding the contract method 0x584060bb.
//
// Solidity: function _sequencers_in_probation(uint256 ) view returns(address)
func (_Staking *StakingCaller) SequencersInProbation(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_sequencers_in_probation", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencersInProbation is a free data retrieval call binding the contract method 0x584060bb.
//
// Solidity: function _sequencers_in_probation(uint256 ) view returns(address)
func (_Staking *StakingSession) SequencersInProbation(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.SequencersInProbation(&_Staking.CallOpts, arg0)
}

// SequencersInProbation is a free data retrieval call binding the contract method 0x584060bb.
//
// Solidity: function _sequencers_in_probation(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) SequencersInProbation(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.SequencersInProbation(&_Staking.CallOpts, arg0)
}

// SlashPercentage is a free data retrieval call binding the contract method 0xd551832f.
//
// Solidity: function _slashPercentage() view returns(uint256)
func (_Staking *StakingCaller) SlashPercentage(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_slashPercentage")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SlashPercentage is a free data retrieval call binding the contract method 0xd551832f.
//
// Solidity: function _slashPercentage() view returns(uint256)
func (_Staking *StakingSession) SlashPercentage() (*big.Int, error) {
	return _Staking.Contract.SlashPercentage(&_Staking.CallOpts)
}

// SlashPercentage is a free data retrieval call binding the contract method 0xd551832f.
//
// Solidity: function _slashPercentage() view returns(uint256)
func (_Staking *StakingCallerSession) SlashPercentage() (*big.Int, error) {
	return _Staking.Contract.SlashPercentage(&_Staking.CallOpts)
}

// StakedAmount is a free data retrieval call binding the contract method 0xe387a7ed.
//
// Solidity: function _stakedAmount() view returns(uint256)
func (_Staking *StakingCaller) StakedAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_stakedAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakedAmount is a free data retrieval call binding the contract method 0xe387a7ed.
//
// Solidity: function _stakedAmount() view returns(uint256)
func (_Staking *StakingSession) StakedAmount() (*big.Int, error) {
	return _Staking.Contract.StakedAmount(&_Staking.CallOpts)
}

// StakedAmount is a free data retrieval call binding the contract method 0xe387a7ed.
//
// Solidity: function _stakedAmount() view returns(uint256)
func (_Staking *StakingCallerSession) StakedAmount() (*big.Int, error) {
	return _Staking.Contract.StakedAmount(&_Staking.CallOpts)
}

// Watchtowers is a free data retrieval call binding the contract method 0xc48c5f37.
//
// Solidity: function _watchtowers(uint256 ) view returns(address)
func (_Staking *StakingCaller) Watchtowers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "_watchtowers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Watchtowers is a free data retrieval call binding the contract method 0xc48c5f37.
//
// Solidity: function _watchtowers(uint256 ) view returns(address)
func (_Staking *StakingSession) Watchtowers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Watchtowers(&_Staking.CallOpts, arg0)
}

// Watchtowers is a free data retrieval call binding the contract method 0xc48c5f37.
//
// Solidity: function _watchtowers(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) Watchtowers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Watchtowers(&_Staking.CallOpts, arg0)
}

// BeginDisputeResolution is a paid mutator transaction binding the contract method 0x6b2f7635.
//
// Solidity: function BeginDisputeResolution(address sequencerAddr) returns()
func (_Staking *StakingTransactor) BeginDisputeResolution(opts *bind.TransactOpts, sequencerAddr common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "BeginDisputeResolution", sequencerAddr)
}

// BeginDisputeResolution is a paid mutator transaction binding the contract method 0x6b2f7635.
//
// Solidity: function BeginDisputeResolution(address sequencerAddr) returns()
func (_Staking *StakingSession) BeginDisputeResolution(sequencerAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.BeginDisputeResolution(&_Staking.TransactOpts, sequencerAddr)
}

// BeginDisputeResolution is a paid mutator transaction binding the contract method 0x6b2f7635.
//
// Solidity: function BeginDisputeResolution(address sequencerAddr) returns()
func (_Staking *StakingTransactorSession) BeginDisputeResolution(sequencerAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.BeginDisputeResolution(&_Staking.TransactOpts, sequencerAddr)
}

// EndDisputeResolution is a paid mutator transaction binding the contract method 0xebe4ad6f.
//
// Solidity: function EndDisputeResolution(address sequencerAddr) returns()
func (_Staking *StakingTransactor) EndDisputeResolution(opts *bind.TransactOpts, sequencerAddr common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "EndDisputeResolution", sequencerAddr)
}

// EndDisputeResolution is a paid mutator transaction binding the contract method 0xebe4ad6f.
//
// Solidity: function EndDisputeResolution(address sequencerAddr) returns()
func (_Staking *StakingSession) EndDisputeResolution(sequencerAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.EndDisputeResolution(&_Staking.TransactOpts, sequencerAddr)
}

// EndDisputeResolution is a paid mutator transaction binding the contract method 0xebe4ad6f.
//
// Solidity: function EndDisputeResolution(address sequencerAddr) returns()
func (_Staking *StakingTransactorSession) EndDisputeResolution(sequencerAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.EndDisputeResolution(&_Staking.TransactOpts, sequencerAddr)
}

// SetMaxNumParticipants is a paid mutator transaction binding the contract method 0xe028aadf.
//
// Solidity: function SetMaxNumParticipants(uint256 maximumNumParticipants) returns(uint256)
func (_Staking *StakingTransactor) SetMaxNumParticipants(opts *bind.TransactOpts, maximumNumParticipants *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetMaxNumParticipants", maximumNumParticipants)
}

// SetMaxNumParticipants is a paid mutator transaction binding the contract method 0xe028aadf.
//
// Solidity: function SetMaxNumParticipants(uint256 maximumNumParticipants) returns(uint256)
func (_Staking *StakingSession) SetMaxNumParticipants(maximumNumParticipants *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMaxNumParticipants(&_Staking.TransactOpts, maximumNumParticipants)
}

// SetMaxNumParticipants is a paid mutator transaction binding the contract method 0xe028aadf.
//
// Solidity: function SetMaxNumParticipants(uint256 maximumNumParticipants) returns(uint256)
func (_Staking *StakingTransactorSession) SetMaxNumParticipants(maximumNumParticipants *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMaxNumParticipants(&_Staking.TransactOpts, maximumNumParticipants)
}

// SetMaxNumSequencers is a paid mutator transaction binding the contract method 0xf9a43d4c.
//
// Solidity: function SetMaxNumSequencers(uint256 maximumNumSequencers) returns(uint256)
func (_Staking *StakingTransactor) SetMaxNumSequencers(opts *bind.TransactOpts, maximumNumSequencers *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetMaxNumSequencers", maximumNumSequencers)
}

// SetMaxNumSequencers is a paid mutator transaction binding the contract method 0xf9a43d4c.
//
// Solidity: function SetMaxNumSequencers(uint256 maximumNumSequencers) returns(uint256)
func (_Staking *StakingSession) SetMaxNumSequencers(maximumNumSequencers *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMaxNumSequencers(&_Staking.TransactOpts, maximumNumSequencers)
}

// SetMaxNumSequencers is a paid mutator transaction binding the contract method 0xf9a43d4c.
//
// Solidity: function SetMaxNumSequencers(uint256 maximumNumSequencers) returns(uint256)
func (_Staking *StakingTransactorSession) SetMaxNumSequencers(maximumNumSequencers *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMaxNumSequencers(&_Staking.TransactOpts, maximumNumSequencers)
}

// SetMaxNumWatchtowers is a paid mutator transaction binding the contract method 0xd147c387.
//
// Solidity: function SetMaxNumWatchtowers(uint256 maximumNumWatchtowers) returns(uint256)
func (_Staking *StakingTransactor) SetMaxNumWatchtowers(opts *bind.TransactOpts, maximumNumWatchtowers *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetMaxNumWatchtowers", maximumNumWatchtowers)
}

// SetMaxNumWatchtowers is a paid mutator transaction binding the contract method 0xd147c387.
//
// Solidity: function SetMaxNumWatchtowers(uint256 maximumNumWatchtowers) returns(uint256)
func (_Staking *StakingSession) SetMaxNumWatchtowers(maximumNumWatchtowers *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMaxNumWatchtowers(&_Staking.TransactOpts, maximumNumWatchtowers)
}

// SetMaxNumWatchtowers is a paid mutator transaction binding the contract method 0xd147c387.
//
// Solidity: function SetMaxNumWatchtowers(uint256 maximumNumWatchtowers) returns(uint256)
func (_Staking *StakingTransactorSession) SetMaxNumWatchtowers(maximumNumWatchtowers *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMaxNumWatchtowers(&_Staking.TransactOpts, maximumNumWatchtowers)
}

// SetMinNumParticipants is a paid mutator transaction binding the contract method 0x98abb25e.
//
// Solidity: function SetMinNumParticipants(uint256 minimumNumParticipants) returns(uint256)
func (_Staking *StakingTransactor) SetMinNumParticipants(opts *bind.TransactOpts, minimumNumParticipants *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetMinNumParticipants", minimumNumParticipants)
}

// SetMinNumParticipants is a paid mutator transaction binding the contract method 0x98abb25e.
//
// Solidity: function SetMinNumParticipants(uint256 minimumNumParticipants) returns(uint256)
func (_Staking *StakingSession) SetMinNumParticipants(minimumNumParticipants *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinNumParticipants(&_Staking.TransactOpts, minimumNumParticipants)
}

// SetMinNumParticipants is a paid mutator transaction binding the contract method 0x98abb25e.
//
// Solidity: function SetMinNumParticipants(uint256 minimumNumParticipants) returns(uint256)
func (_Staking *StakingTransactorSession) SetMinNumParticipants(minimumNumParticipants *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinNumParticipants(&_Staking.TransactOpts, minimumNumParticipants)
}

// SetMinNumSequencers is a paid mutator transaction binding the contract method 0xb61b127f.
//
// Solidity: function SetMinNumSequencers(uint256 minimumNumSequencers) returns(uint256)
func (_Staking *StakingTransactor) SetMinNumSequencers(opts *bind.TransactOpts, minimumNumSequencers *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetMinNumSequencers", minimumNumSequencers)
}

// SetMinNumSequencers is a paid mutator transaction binding the contract method 0xb61b127f.
//
// Solidity: function SetMinNumSequencers(uint256 minimumNumSequencers) returns(uint256)
func (_Staking *StakingSession) SetMinNumSequencers(minimumNumSequencers *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinNumSequencers(&_Staking.TransactOpts, minimumNumSequencers)
}

// SetMinNumSequencers is a paid mutator transaction binding the contract method 0xb61b127f.
//
// Solidity: function SetMinNumSequencers(uint256 minimumNumSequencers) returns(uint256)
func (_Staking *StakingTransactorSession) SetMinNumSequencers(minimumNumSequencers *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinNumSequencers(&_Staking.TransactOpts, minimumNumSequencers)
}

// SetMinNumWatchtowers is a paid mutator transaction binding the contract method 0xd80ff2b9.
//
// Solidity: function SetMinNumWatchtowers(uint256 minimumNumWatchtowers) returns(uint256)
func (_Staking *StakingTransactor) SetMinNumWatchtowers(opts *bind.TransactOpts, minimumNumWatchtowers *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetMinNumWatchtowers", minimumNumWatchtowers)
}

// SetMinNumWatchtowers is a paid mutator transaction binding the contract method 0xd80ff2b9.
//
// Solidity: function SetMinNumWatchtowers(uint256 minimumNumWatchtowers) returns(uint256)
func (_Staking *StakingSession) SetMinNumWatchtowers(minimumNumWatchtowers *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinNumWatchtowers(&_Staking.TransactOpts, minimumNumWatchtowers)
}

// SetMinNumWatchtowers is a paid mutator transaction binding the contract method 0xd80ff2b9.
//
// Solidity: function SetMinNumWatchtowers(uint256 minimumNumWatchtowers) returns(uint256)
func (_Staking *StakingTransactorSession) SetMinNumWatchtowers(minimumNumWatchtowers *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinNumWatchtowers(&_Staking.TransactOpts, minimumNumWatchtowers)
}

// SetSlashPercentage is a paid mutator transaction binding the contract method 0x42ca58d5.
//
// Solidity: function SetSlashPercentage(uint256 newPercentage) returns()
func (_Staking *StakingTransactor) SetSlashPercentage(opts *bind.TransactOpts, newPercentage *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetSlashPercentage", newPercentage)
}

// SetSlashPercentage is a paid mutator transaction binding the contract method 0x42ca58d5.
//
// Solidity: function SetSlashPercentage(uint256 newPercentage) returns()
func (_Staking *StakingSession) SetSlashPercentage(newPercentage *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetSlashPercentage(&_Staking.TransactOpts, newPercentage)
}

// SetSlashPercentage is a paid mutator transaction binding the contract method 0x42ca58d5.
//
// Solidity: function SetSlashPercentage(uint256 newPercentage) returns()
func (_Staking *StakingTransactorSession) SetSlashPercentage(newPercentage *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetSlashPercentage(&_Staking.TransactOpts, newPercentage)
}

// SetStakingMinThreshold is a paid mutator transaction binding the contract method 0x2c404e9c.
//
// Solidity: function SetStakingMinThreshold(uint256 newThreshold) returns()
func (_Staking *StakingTransactor) SetStakingMinThreshold(opts *bind.TransactOpts, newThreshold *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "SetStakingMinThreshold", newThreshold)
}

// SetStakingMinThreshold is a paid mutator transaction binding the contract method 0x2c404e9c.
//
// Solidity: function SetStakingMinThreshold(uint256 newThreshold) returns()
func (_Staking *StakingSession) SetStakingMinThreshold(newThreshold *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetStakingMinThreshold(&_Staking.TransactOpts, newThreshold)
}

// SetStakingMinThreshold is a paid mutator transaction binding the contract method 0x2c404e9c.
//
// Solidity: function SetStakingMinThreshold(uint256 newThreshold) returns()
func (_Staking *StakingTransactorSession) SetStakingMinThreshold(newThreshold *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetStakingMinThreshold(&_Staking.TransactOpts, newThreshold)
}

// Slash is a paid mutator transaction binding the contract method 0xc96be4cb.
//
// Solidity: function slash(address slashAddr) returns()
func (_Staking *StakingTransactor) Slash(opts *bind.TransactOpts, slashAddr common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "slash", slashAddr)
}

// Slash is a paid mutator transaction binding the contract method 0xc96be4cb.
//
// Solidity: function slash(address slashAddr) returns()
func (_Staking *StakingSession) Slash(slashAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.Slash(&_Staking.TransactOpts, slashAddr)
}

// Slash is a paid mutator transaction binding the contract method 0xc96be4cb.
//
// Solidity: function slash(address slashAddr) returns()
func (_Staking *StakingTransactorSession) Slash(slashAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.Slash(&_Staking.TransactOpts, slashAddr)
}

// Stake is a paid mutator transaction binding the contract method 0x46f45b8d.
//
// Solidity: function stake(string nodeType) payable returns()
func (_Staking *StakingTransactor) Stake(opts *bind.TransactOpts, nodeType string) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "stake", nodeType)
}

// Stake is a paid mutator transaction binding the contract method 0x46f45b8d.
//
// Solidity: function stake(string nodeType) payable returns()
func (_Staking *StakingSession) Stake(nodeType string) (*types.Transaction, error) {
	return _Staking.Contract.Stake(&_Staking.TransactOpts, nodeType)
}

// Stake is a paid mutator transaction binding the contract method 0x46f45b8d.
//
// Solidity: function stake(string nodeType) payable returns()
func (_Staking *StakingTransactorSession) Stake(nodeType string) (*types.Transaction, error) {
	return _Staking.Contract.Stake(&_Staking.TransactOpts, nodeType)
}

// Unstake is a paid mutator transaction binding the contract method 0x2def6620.
//
// Solidity: function unstake() returns()
func (_Staking *StakingTransactor) Unstake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unstake")
}

// Unstake is a paid mutator transaction binding the contract method 0x2def6620.
//
// Solidity: function unstake() returns()
func (_Staking *StakingSession) Unstake() (*types.Transaction, error) {
	return _Staking.Contract.Unstake(&_Staking.TransactOpts)
}

// Unstake is a paid mutator transaction binding the contract method 0x2def6620.
//
// Solidity: function unstake() returns()
func (_Staking *StakingTransactorSession) Unstake() (*types.Transaction, error) {
	return _Staking.Contract.Unstake(&_Staking.TransactOpts)
}

// StakingDisputeResolutionBeganIterator is returned from FilterDisputeResolutionBegan and is used to iterate over the raw logs and unpacked data for DisputeResolutionBegan events raised by the Staking contract.
type StakingDisputeResolutionBeganIterator struct {
	Event *StakingDisputeResolutionBegan // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingDisputeResolutionBeganIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingDisputeResolutionBegan)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingDisputeResolutionBegan)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingDisputeResolutionBeganIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingDisputeResolutionBeganIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingDisputeResolutionBegan represents a DisputeResolutionBegan event raised by the Staking contract.
type StakingDisputeResolutionBegan struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDisputeResolutionBegan is a free log retrieval operation binding the contract event 0x14ebe573ff6e00d7293f5d831eb94cade703155cd0910eb5316a7b2f17b14c35.
//
// Solidity: event DisputeResolutionBegan(address indexed account)
func (_Staking *StakingFilterer) FilterDisputeResolutionBegan(opts *bind.FilterOpts, account []common.Address) (*StakingDisputeResolutionBeganIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "DisputeResolutionBegan", accountRule)
	if err != nil {
		return nil, err
	}
	return &StakingDisputeResolutionBeganIterator{contract: _Staking.contract, event: "DisputeResolutionBegan", logs: logs, sub: sub}, nil
}

// WatchDisputeResolutionBegan is a free log subscription operation binding the contract event 0x14ebe573ff6e00d7293f5d831eb94cade703155cd0910eb5316a7b2f17b14c35.
//
// Solidity: event DisputeResolutionBegan(address indexed account)
func (_Staking *StakingFilterer) WatchDisputeResolutionBegan(opts *bind.WatchOpts, sink chan<- *StakingDisputeResolutionBegan, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "DisputeResolutionBegan", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingDisputeResolutionBegan)
				if err := _Staking.contract.UnpackLog(event, "DisputeResolutionBegan", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisputeResolutionBegan is a log parse operation binding the contract event 0x14ebe573ff6e00d7293f5d831eb94cade703155cd0910eb5316a7b2f17b14c35.
//
// Solidity: event DisputeResolutionBegan(address indexed account)
func (_Staking *StakingFilterer) ParseDisputeResolutionBegan(log types.Log) (*StakingDisputeResolutionBegan, error) {
	event := new(StakingDisputeResolutionBegan)
	if err := _Staking.contract.UnpackLog(event, "DisputeResolutionBegan", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingDisputeResolutionEndedIterator is returned from FilterDisputeResolutionEnded and is used to iterate over the raw logs and unpacked data for DisputeResolutionEnded events raised by the Staking contract.
type StakingDisputeResolutionEndedIterator struct {
	Event *StakingDisputeResolutionEnded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingDisputeResolutionEndedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingDisputeResolutionEnded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingDisputeResolutionEnded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingDisputeResolutionEndedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingDisputeResolutionEndedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingDisputeResolutionEnded represents a DisputeResolutionEnded event raised by the Staking contract.
type StakingDisputeResolutionEnded struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDisputeResolutionEnded is a free log retrieval operation binding the contract event 0x7da9849dcad1bb34324464458a33a9d0820286dedf66ec9c6669e730118d1c06.
//
// Solidity: event DisputeResolutionEnded(address indexed account)
func (_Staking *StakingFilterer) FilterDisputeResolutionEnded(opts *bind.FilterOpts, account []common.Address) (*StakingDisputeResolutionEndedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "DisputeResolutionEnded", accountRule)
	if err != nil {
		return nil, err
	}
	return &StakingDisputeResolutionEndedIterator{contract: _Staking.contract, event: "DisputeResolutionEnded", logs: logs, sub: sub}, nil
}

// WatchDisputeResolutionEnded is a free log subscription operation binding the contract event 0x7da9849dcad1bb34324464458a33a9d0820286dedf66ec9c6669e730118d1c06.
//
// Solidity: event DisputeResolutionEnded(address indexed account)
func (_Staking *StakingFilterer) WatchDisputeResolutionEnded(opts *bind.WatchOpts, sink chan<- *StakingDisputeResolutionEnded, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "DisputeResolutionEnded", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingDisputeResolutionEnded)
				if err := _Staking.contract.UnpackLog(event, "DisputeResolutionEnded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisputeResolutionEnded is a log parse operation binding the contract event 0x7da9849dcad1bb34324464458a33a9d0820286dedf66ec9c6669e730118d1c06.
//
// Solidity: event DisputeResolutionEnded(address indexed account)
func (_Staking *StakingFilterer) ParseDisputeResolutionEnded(log types.Log) (*StakingDisputeResolutionEnded, error) {
	event := new(StakingDisputeResolutionEnded)
	if err := _Staking.contract.UnpackLog(event, "DisputeResolutionEnded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingSlashedIterator is returned from FilterSlashed and is used to iterate over the raw logs and unpacked data for Slashed events raised by the Staking contract.
type StakingSlashedIterator struct {
	Event *StakingSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingSlashed represents a Slashed event raised by the Staking contract.
type StakingSlashed struct {
	Account          common.Address
	NewAmount        *big.Int
	SlashedAmount    *big.Int
	FeeRecipientAddr common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterSlashed is a free log retrieval operation binding the contract event 0x10cc080888f97c96419786385100283aa8ae09efd09b75964b955212f42847d4.
//
// Solidity: event Slashed(address indexed account, uint256 newAmount, uint256 slashedAmount, address indexed feeRecipientAddr)
func (_Staking *StakingFilterer) FilterSlashed(opts *bind.FilterOpts, account []common.Address, feeRecipientAddr []common.Address) (*StakingSlashedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	var feeRecipientAddrRule []interface{}
	for _, feeRecipientAddrItem := range feeRecipientAddr {
		feeRecipientAddrRule = append(feeRecipientAddrRule, feeRecipientAddrItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Slashed", accountRule, feeRecipientAddrRule)
	if err != nil {
		return nil, err
	}
	return &StakingSlashedIterator{contract: _Staking.contract, event: "Slashed", logs: logs, sub: sub}, nil
}

// WatchSlashed is a free log subscription operation binding the contract event 0x10cc080888f97c96419786385100283aa8ae09efd09b75964b955212f42847d4.
//
// Solidity: event Slashed(address indexed account, uint256 newAmount, uint256 slashedAmount, address indexed feeRecipientAddr)
func (_Staking *StakingFilterer) WatchSlashed(opts *bind.WatchOpts, sink chan<- *StakingSlashed, account []common.Address, feeRecipientAddr []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	var feeRecipientAddrRule []interface{}
	for _, feeRecipientAddrItem := range feeRecipientAddr {
		feeRecipientAddrRule = append(feeRecipientAddrRule, feeRecipientAddrItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Slashed", accountRule, feeRecipientAddrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingSlashed)
				if err := _Staking.contract.UnpackLog(event, "Slashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashed is a log parse operation binding the contract event 0x10cc080888f97c96419786385100283aa8ae09efd09b75964b955212f42847d4.
//
// Solidity: event Slashed(address indexed account, uint256 newAmount, uint256 slashedAmount, address indexed feeRecipientAddr)
func (_Staking *StakingFilterer) ParseSlashed(log types.Log) (*StakingSlashed, error) {
	event := new(StakingSlashed)
	if err := _Staking.contract.UnpackLog(event, "Slashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingStakedIterator is returned from FilterStaked and is used to iterate over the raw logs and unpacked data for Staked events raised by the Staking contract.
type StakingStakedIterator struct {
	Event *StakingStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingStaked represents a Staked event raised by the Staking contract.
type StakingStaked struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterStaked is a free log retrieval operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address indexed account, uint256 amount)
func (_Staking *StakingFilterer) FilterStaked(opts *bind.FilterOpts, account []common.Address) (*StakingStakedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Staked", accountRule)
	if err != nil {
		return nil, err
	}
	return &StakingStakedIterator{contract: _Staking.contract, event: "Staked", logs: logs, sub: sub}, nil
}

// WatchStaked is a free log subscription operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address indexed account, uint256 amount)
func (_Staking *StakingFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *StakingStaked, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Staked", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingStaked)
				if err := _Staking.contract.UnpackLog(event, "Staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaked is a log parse operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address indexed account, uint256 amount)
func (_Staking *StakingFilterer) ParseStaked(log types.Log) (*StakingStaked, error) {
	event := new(StakingStaked)
	if err := _Staking.contract.UnpackLog(event, "Staked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingUnstakedIterator is returned from FilterUnstaked and is used to iterate over the raw logs and unpacked data for Unstaked events raised by the Staking contract.
type StakingUnstakedIterator struct {
	Event *StakingUnstaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUnstakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUnstaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUnstaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUnstakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUnstakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUnstaked represents a Unstaked event raised by the Staking contract.
type StakingUnstaked struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnstaked is a free log retrieval operation binding the contract event 0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75.
//
// Solidity: event Unstaked(address indexed account, uint256 amount)
func (_Staking *StakingFilterer) FilterUnstaked(opts *bind.FilterOpts, account []common.Address) (*StakingUnstakedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Unstaked", accountRule)
	if err != nil {
		return nil, err
	}
	return &StakingUnstakedIterator{contract: _Staking.contract, event: "Unstaked", logs: logs, sub: sub}, nil
}

// WatchUnstaked is a free log subscription operation binding the contract event 0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75.
//
// Solidity: event Unstaked(address indexed account, uint256 amount)
func (_Staking *StakingFilterer) WatchUnstaked(opts *bind.WatchOpts, sink chan<- *StakingUnstaked, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Unstaked", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUnstaked)
				if err := _Staking.contract.UnpackLog(event, "Unstaked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnstaked is a log parse operation binding the contract event 0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75.
//
// Solidity: event Unstaked(address indexed account, uint256 amount)
func (_Staking *StakingFilterer) ParseUnstaked(log types.Log) (*StakingUnstaked, error) {
	event := new(StakingUnstaked)
	if err := _Staking.contract.UnpackLog(event, "Unstaked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
